/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
 */
class GameApp {
    constructor() {
        this.currentScreen = 'loading-screen';
        this.currentBattle = null;
        this.mobNames = [
            '–ó–ª–æ–π –ì–æ–±–ª–∏–Ω', '–î–∏–∫–∏–π –í–æ–ª–∫', '–ë–∞–Ω–¥–∏—Ç', '–°–∫–µ–ª–µ—Ç-–≤–æ–∏–Ω', '–û—Ä–∫-–±–µ—Ä—Å–µ—Ä–∫',
            '–ó–æ–º–±–∏', '–ü–∞—É–∫-–æ—Ö–æ—Ç–Ω–∏–∫', '–¢–µ–º–Ω—ã–π –º–∞–≥', '–†–∞–∑–±–æ–π–Ω–∏–∫', '–¢—Ä–æ–ª–ª—å'
        ];
        this.initializeEventListeners();
        this.checkAutoLogin();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    initializeEventListeners() {
        document.addEventListener('DOMContentLoaded', () => {
            // –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            const btnRegister = document.getElementById('btn-register');
            const btnLogin = document.getElementById('btn-login');
            
            if (btnRegister) {
                btnRegister.addEventListener('click', () => this.showScreen('register-screen'));
            }
            
            if (btnLogin) {
                btnLogin.addEventListener('click', () => this.showScreen('login-screen'));
            }
            
            // –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            const btnBack = document.getElementById('btn-back');
            const btnLoginBack = document.getElementById('btn-login-back');
            const btnCharBack = document.getElementById('btn-char-back');
            
            if (btnBack) {
                btnBack.addEventListener('click', () => this.showScreen('loading-screen'));
            }
            
            if (btnLoginBack) {
                btnLoginBack.addEventListener('click', () => this.showScreen('loading-screen'));
            }
            
            if (btnCharBack) {
                btnCharBack.addEventListener('click', () => {
                    window.gameCharacter.resetStats();
                    this.showScreen('register-screen');
                });
            }
            
            // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            const btnCreateCharacter = document.getElementById('btn-create-character');
            if (btnCreateCharacter) {
                btnCreateCharacter.addEventListener('click', () => {
                    window.authSystem.completeCharacterCreation();
                });
            }
            
            // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
            const btnLogout = document.getElementById('btn-logout');
            if (btnLogout) {
                btnLogout.addEventListener('click', () => {
                    window.authSystem.logout();
                });
            }
            
            // –ö–Ω–æ–ø–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª)
            const btnTrain = document.getElementById('train-btn');
            if (btnTrain) {
                btnTrain.addEventListener('click', () => this.showGym());
            }
            
            // –ö–Ω–æ–ø–∫–∞ –∞—Ä–µ–Ω—ã
            const arenaBtn = document.getElementById('arena-btn');
            if (arenaBtn) {
                arenaBtn.addEventListener('click', () => {
                    console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∞—Ä–µ–Ω—É...');
                    this.showScreen('arena-screen');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –∞—Ä–µ–Ω–µ
                    const currentUser = window.authSystem.getCurrentUser();
                    if (currentUser) {
                        setTimeout(() => {
                            this.updateArenaDisplay(currentUser);
                        }, 100);
                    }
                });
            }
            
            // –ö–ù–û–ü–ö–ê –õ–û–ö–ê–¶–ò–ò –ö–ê–†–¢–ê - –ù–û–í–û–ï!
            const mapLocationBtn = document.getElementById('map-location-btn');
            if (mapLocationBtn) {
                mapLocationBtn.addEventListener('click', () => {
                    console.log('üó∫Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–æ–∫–∞—Ü–∏—é –ö–∞—Ä—Ç–∞...');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–∞
                    if (window.mapLocationUI) {
                        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        this.showScreen('game-screen');
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ä—Ç—ã
                        window.mapLocationUI.createMapLocationInterface();
                        
                        console.log('‚úÖ –õ–æ–∫–∞—Ü–∏—è –ö–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞!');
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
                        alert('–û—à–∏–±–∫–∞: –ª–æ–∫–∞—Ü–∏—è –∫–∞—Ä—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
                    }
                });
            }
            
            // –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞
            const chatBtn = document.getElementById('chat-btn');
            if (chatBtn) {
                chatBtn.addEventListener('click', () => this.showChat());
            }
            
            // –ö–Ω–æ–ø–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
            const ratingBtn = document.getElementById('rating-btn');
            if (ratingBtn) {
                ratingBtn.addEventListener('click', () => this.showRating());
            }
            
            // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            const chatClose = document.getElementById('chat-close');
            const ratingClose = document.getElementById('rating-close');
            const chatSend = document.getElementById('chat-send');
            const chatInput = document.getElementById('chat-input');
            const chatModal = document.getElementById('chat-modal');
            const ratingModal = document.getElementById('rating-modal');
            
            if (chatClose) {
                chatClose.addEventListener('click', () => this.hideModal('chat-modal'));
            }
            
            if (ratingClose) {
                ratingClose.addEventListener('click', () => this.hideModal('rating-modal'));
            }
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
            if (chatModal) {
                chatModal.addEventListener('click', (e) => {
                    if (e.target === chatModal) {
                        this.hideModal('chat-modal');
                    }
                });
            }
            
            if (ratingModal) {
                ratingModal.addEventListener('click', (e) => {
                    if (e.target === ratingModal) {
                        this.hideModal('rating-modal');
                    }
                });
            }
            
            if (chatSend) {
                chatSend.addEventListener('click', () => this.sendChatMessage());
            }
            
            if (chatInput) {
                chatInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.sendChatMessage();
                    }
                });
            }
            
            // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Å–ø–æ—Ä—Ç–∑–∞–ª–∞
            const gymBackBtn = document.getElementById('gym-back-btn');
            if (gymBackBtn) {
                gymBackBtn.addEventListener('click', () => this.showScreen('game-screen'));
            }
            
            // –ö–Ω–æ–ø–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ
            document.querySelectorAll('.upgrade-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const stat = e.target.dataset.stat;
                    this.trainStat(stat);
                });
            });
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
     */
    showScreen(screenId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        const screens = document.querySelectorAll('.screen');
        screens.forEach(screen => {
            screen.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenId);
        if (targetScreen) {
            targetScreen.classList.add('active');
            this.currentScreen = screenId;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤
            this.onScreenShow(screenId);
        }
    }
    
    /**
     * –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Ä–∞–Ω–∞
     */
    onScreenShow(screenId) {
        switch (screenId) {
            case 'character-screen':
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                if (window.gameCharacter && window.gameCharacter.updateStatsDisplay) {
                    window.gameCharacter.updateStatsDisplay();
                }
                break;
                
            case 'gym-screen':
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç–∑–∞–ª–∞
                const currentUser = window.authSystem.getCurrentUser();
                if (currentUser) {
                    this.updateGymDisplay(currentUser);
                }
                break;
                
            case 'arena-screen':
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä–µ–Ω—ã
                const arenaUser = window.authSystem.getCurrentUser();
                if (arenaUser) {
                    this.updateArenaDisplay(arenaUser);
                }
                break;
                
            case 'register-screen':
                this.clearForm('register-form');
                this.initRegisterButton();
                break;
                
            case 'login-screen':
                this.clearForm('login-form');
                break;
                
            case 'loading-screen':
                if (window.tempRegistrationData) {
                    delete window.tempRegistrationData;
                }
                window.gameCharacter.resetStats();
                break;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä–µ–Ω—ã
     */
    updateArenaDisplay(user) {
        const battleStats = this.calculateBattleStats(user);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
        const arenaPlayerName = document.getElementById('arena-player-name');
        const arenaPlayerHp = document.getElementById('arena-player-hp');
        const arenaPlayerAttack = document.getElementById('arena-player-attack');
        const arenaPlayerDefense = document.getElementById('arena-player-defense');
        const arenaPlayerFaction = document.getElementById('arena-player-faction');
        
        if (arenaPlayerName) arenaPlayerName.textContent = user.nickname;
        if (arenaPlayerHp) arenaPlayerHp.textContent = battleStats.hp;
        if (arenaPlayerAttack) arenaPlayerAttack.textContent = battleStats.attack;
        if (arenaPlayerDefense) arenaPlayerDefense.textContent = battleStats.defense;
        
        const factionName = user.faction === 'workers' ? '–†–∞–±–æ—Ç—è–≥–∏' : '–ö—Ä–µ–∞–∫–ª—ã';
        if (arenaPlayerFaction) arenaPlayerFaction.textContent = factionName;
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–æ–µ–≤
        const battleResult = document.getElementById('battle-result');
        if (battleResult) battleResult.style.display = 'none';
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
     */
    calculateBattleStats(user) {
        const stats = user.stats || {};
        
        return {
            hp: 50 + (stats.end || 1) * 10,
            attack: 10 + (stats.str || 1) * 3,
            defense: (stats.end || 1) * 2,
            dodgeChance: ((stats.dex || 1) * 1.5 + (stats.int || 1) * 2 + (stats.lck || 1) * 1),
            doubleHitChance: ((stats.dex || 1) * 2 + (stats.lck || 1) * 1.5),
            speed: stats.dex || 1
        };
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
     */
    async findOpponent(type) {
        const currentUser = window.authSystem.getCurrentUser();
        if (!currentUser) return;
        
        let opponent;
        
        if (type === 'player') {
            opponent = await this.findPlayerOpponent(currentUser);
        }
        
        if (!opponent || type === 'mob') {
            opponent = this.generateMob(currentUser);
        }
        
        this.showBattleSetup(currentUser, opponent);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞-–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ Supabase
     */
    async findPlayerOpponent(currentUser) {
        try {
            if (!window.supabaseClient || !window.supabaseClient.isConnected) {
                console.log('‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–æ–±–∞');
                return null;
            }
            
            const players = await window.supabaseClient.getPlayersRanking(50); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            const currentLevel = currentUser.level || 1;
            
            // –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É—Ä–æ–≤–Ω—è (¬±3)
            const suitableOpponents = players.filter(player => {
                const playerLevel = player.level || 1;
                return player.nickname !== currentUser.nickname && 
                       Math.abs(playerLevel - currentLevel) <= 3;
            });
            
            if (suitableOpponents.length === 0) {
                console.log('üë• –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –º–æ–±–∞');
                return null;
            }
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            const randomIndex = Math.floor(Math.random() * suitableOpponents.length);
            const opponent = suitableOpponents[randomIndex];
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const formattedOpponent = {
                id: 'player_' + opponent.nickname,
                nickname: opponent.nickname,
                faction: opponent.faction,
                level: opponent.level,
                isBot: false,
                gold: 0, // –ù–µ –±–µ—Ä–µ–º –∑–æ–ª–æ—Ç–æ —É –∏–≥—Ä–æ–∫–æ–≤
                stats: {
                    str: opponent.str || 1,
                    end: opponent.end_stat || 1,
                    dex: opponent.dex || 1,
                    int: opponent.int || 1,
                    cha: opponent.cha || 1,
                    lck: opponent.lck || 1
                }
            };
            
            console.log('üë• –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫-–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫:', formattedOpponent);
            return formattedOpponent;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
            return null;
        }
    }
    
    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–±–∞ (—Å–ª–∞–±–µ–µ –∏–≥—Ä–æ–∫–∞)
     */
    generateMob(currentUser) {
        const randomName = this.mobNames[Math.floor(Math.random() * this.mobNames.length)];
        const playerLevel = currentUser.level || 1;
        
        // –ú–æ–± –Ω–∞ 1-2 —É—Ä–æ–≤–Ω—è –Ω–∏–∂–µ –∏–≥—Ä–æ–∫–∞
        const mobLevel = Math.max(1, playerLevel - 1 - Math.floor(Math.random() * 2));
        
        // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã –º–æ–±–∞ (—Å–ª–∞–±—ã–µ)
        const baseStats = {
            str: Math.max(1, Math.floor(mobLevel * 0.8) + Math.floor(Math.random() * 2)),
            end: Math.max(1, Math.floor(mobLevel * 0.7) + Math.floor(Math.random() * 2)),
            dex: Math.max(1, Math.floor(mobLevel * 0.6) + Math.floor(Math.random() * 2)),
            int: Math.max(1, Math.floor(mobLevel * 0.5) + Math.floor(Math.random() * 2)),
            cha: 1,
            lck: Math.max(1, Math.floor(mobLevel * 0.5) + Math.floor(Math.random() * 2))
        };
        
        const mob = {
            id: 'mob_' + Date.now(),
            nickname: randomName,
            faction: Math.random() > 0.5 ? 'workers' : 'creatives',
            level: mobLevel,
            isBot: true,
            gold: 15 + Math.floor(Math.random() * 35), // 15-50 –∑–æ–ª–æ—Ç–∞
            stats: baseStats
        };
        
        console.log('üëπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–±:', {
            name: randomName,
            level: mobLevel,
            playerLevel: playerLevel,
            stats: baseStats
        });
        
        return mob;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –±–æ—é
     */
    showBattleSetup(player, opponent) {
        const playerStats = this.calculateBattleStats(player);
        const opponentStats = this.calculateBattleStats(opponent);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        document.getElementById('fighter1-name').textContent = player.nickname;
        document.getElementById('fighter1-hp').textContent = playerStats.hp;
        document.getElementById('fighter1-attack').textContent = playerStats.attack;
        document.getElementById('fighter1-defense').textContent = playerStats.defense;
        
        const playerFaction = player.faction === 'workers' ? '–†–∞–±–æ—Ç—è–≥–∏' : '–ö—Ä–µ–∞–∫–ª—ã';
        document.getElementById('fighter1-faction').textContent = playerFaction;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        document.getElementById('fighter2-name').textContent = opponent.nickname;
        document.getElementById('fighter2-hp').textContent = opponentStats.hp;
        document.getElementById('fighter2-attack').textContent = opponentStats.attack;
        document.getElementById('fighter2-defense').textContent = opponentStats.defense;
        
        const opponentFaction = opponent.faction === 'workers' ? '–†–∞–±–æ—Ç—è–≥–∏' : '–ö—Ä–µ–∞–∫–ª—ã';
        document.getElementById('fighter2-faction').textContent = opponentFaction;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—è
        this.currentBattle = {
            player: { ...player, battleStats: playerStats },
            opponent: { ...opponent, battleStats: opponentStats },
            log: [],
            winner: null,
            rewards: null
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        document.getElementById('battle-result').style.display = 'block';
        document.getElementById('battle-log').style.display = 'none';
        document.getElementById('battle-outcome').style.display = 'none';
        document.getElementById('start-fight-btn').style.display = 'block';
    }
    
    /**
     * –ù–∞—á–∞—Ç—å –±–æ–π
     */
    startBattle() {
        if (!this.currentBattle) return;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –±–æ—è
        document.getElementById('start-fight-btn').style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ –±–æ—è
        document.getElementById('battle-log').style.display = 'block';
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –±–æ–π
        this.simulateBattle();
    }
    
    /**
     * –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ–π
     */
    simulateBattle() {
        const battle = this.currentBattle;
        const player = { ...battle.player.battleStats, name: battle.player.nickname };
        const opponent = { ...battle.opponent.battleStats, name: battle.opponent.nickname };
        
        let playerHp = player.hp;
        let opponentHp = opponent.hp;
        let turn = 0;
        
        battle.log = [];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
        const playerGoesFirst = player.speed >= opponent.speed;
        
        battle.log.push({
            type: 'system',
            message: `–ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! ${playerGoesFirst ? player.name : opponent.name} –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º.`
        });
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—è
        while (playerHp > 0 && opponentHp > 0 && turn < 20) { // –ú–∞–∫—Å–∏–º—É–º 20 —Ö–æ–¥–æ–≤
            turn++;
            
            if ((playerGoesFirst && turn % 2 === 1) || (!playerGoesFirst && turn % 2 === 0)) {
                // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
                const result = this.performAttack(player, opponent);
                opponentHp -= result.damage;
                battle.log.push({
                    type: 'player-action',
                    message: result.message
                });
                
                if (result.doubleHit) {
                    const secondResult = this.performAttack(player, opponent);
                    opponentHp -= secondResult.damage;
                    battle.log.push({
                        type: 'player-action',
                        message: `–î–≤–æ–π–Ω–æ–π —É–¥–∞—Ä! ${secondResult.message}`
                    });
                }
            } else {
                // –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                const result = this.performAttack(opponent, player);
                playerHp -= result.damage;
                battle.log.push({
                    type: 'opponent-action',
                    message: result.message.replace(opponent.name, battle.opponent.nickname)
                });
                
                if (result.doubleHit) {
                    const secondResult = this.performAttack(opponent, player);
                    playerHp -= secondResult.damage;
                    battle.log.push({
                        type: 'opponent-action',
                        message: `–î–≤–æ–π–Ω–æ–π —É–¥–∞—Ä! ${secondResult.message.replace(opponent.name, battle.opponent.nickname)}`
                    });
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–æ—è
            if (playerHp <= 0 || opponentHp <= 0) {
                break;
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if (playerHp > 0) {
            battle.winner = 'player';
            battle.log.push({
                type: 'system',
                message: `üèÜ ${battle.player.nickname} –æ–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–±–µ–¥—É!`
            });
        } else {
            battle.winner = 'opponent';
            battle.log.push({
                type: 'system',
                message: `üíÄ ${battle.opponent.nickname} –ø–æ–±–µ–∂–¥–∞–µ—Ç!`
            });
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        this.calculateRewards();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.displayBattleLog();
        setTimeout(() => {
            this.showBattleOutcome();
        }, 2000);
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—Ç–∞–∫—É
     */
    performAttack(attacker, defender) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–æ—Ä–æ—Ç
        const dodgeRoll = Math.random() * 100;
        if (dodgeRoll < defender.dodgeChance) {
            return {
                damage: 0,
                dodged: true,
                doubleHit: false,
                message: `${attacker.name} –∞—Ç–∞–∫—É–µ—Ç, –Ω–æ ${defender.name} —É–≤–µ—Ä–Ω—É–ª—Å—è!`
            };
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω
        let damage = Math.max(1, attacker.attack - defender.defense);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–æ–π–Ω–æ–π —É–¥–∞—Ä
        const doubleHitRoll = Math.random() * 100;
        const doubleHit = doubleHitRoll < attacker.doubleHitChance;
        
        return {
            damage: damage,
            dodged: false,
            doubleHit: doubleHit,
            message: `${attacker.name} –Ω–∞–Ω–æ—Å–∏—Ç ${damage} —É—Ä–æ–Ω–∞!`
        };
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã
     */
    calculateRewards() {
        const battle = this.currentBattle;
        
        if (battle.winner === 'player') {
            // –û–ø—ã—Ç –∑–∞ –ø–æ–±–µ–¥—É
            let exp = 8; // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç
            
            if (!battle.opponent.isBot) {
                const levelDiff = (battle.opponent.level || 1) - (battle.player.level || 1);
                if (levelDiff >= 2) exp = 20;
                else if (levelDiff >= 1) exp = 15;
                else if (levelDiff >= 0) exp = 10;
                else exp = 5;
            }
            
            // –ó–æ–ª–æ—Ç–æ –∑–∞ –ø–æ–±–µ–¥—É
            let gold = 0;
            if (battle.opponent.isBot) {
                gold = battle.opponent.gold; // –í—Å–µ –∑–æ–ª–æ—Ç–æ –º–æ–±–∞
            } else {
                gold = Math.floor((battle.opponent.gold || 0) * 0.15); // 15% –æ—Ç –∑–æ–ª–æ—Ç–∞ –∏–≥—Ä–æ–∫–∞
            }
            
            battle.rewards = { exp, gold };
        } else {
            // –ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫ —Ç–µ—Ä—è–µ—Ç –∑–æ–ª–æ—Ç–æ
            const playerGold = battle.player.gold || 0;
            const lostGold = Math.floor(playerGold * 0.1); // –¢–µ—Ä—è–µ–º 10%
            
            battle.rewards = { exp: 0, gold: -lostGold };
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ª–æ–≥ –±–æ—è
     */
    displayBattleLog() {
        const logEntries = document.getElementById('log-entries');
        logEntries.innerHTML = '';
        
        this.currentBattle.log.forEach(entry => {
            const logElement = document.createElement('div');
            logElement.className = `log-entry ${entry.type}`;
            logElement.textContent = entry.message;
            logEntries.appendChild(logElement);
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        logEntries.scrollTop = logEntries.scrollHeight;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
     */
    showBattleOutcome() {
        const battle = this.currentBattle;
        const outcomeDiv = document.getElementById('battle-outcome');
        
        if (battle.winner === 'player') {
            outcomeDiv.className = 'battle-outcome';
            document.getElementById('outcome-title').textContent = 'üèÜ –ü–û–ë–ï–î–ê!';
            document.getElementById('outcome-description').textContent = '–í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–±–µ–¥—É!';
        } else {
            outcomeDiv.className = 'battle-outcome defeat';
            document.getElementById('outcome-title').textContent = 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï';
            document.getElementById('outcome-description').textContent = '–í—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        if (battle.rewards.exp > 0) {
            document.getElementById('reward-exp').textContent = battle.rewards.exp;
            document.querySelector('.reward-item').style.display = 'flex';
        } else {
            document.querySelector('.reward-item').style.display = 'none';
        }
        
        document.getElementById('reward-gold').textContent = battle.rewards.gold >= 0 ? `+${battle.rewards.gold}` : battle.rewards.gold;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∫ –∏–≥—Ä–æ–∫—É
        this.applyRewards();
        
        outcomeDiv.style.display = 'block';
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase)
     */
    async applyRewards() {
        const currentUser = window.authSystem.getCurrentUser();
        const battle = this.currentBattle;
        
        if (!currentUser || !battle || !battle.rewards) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã:', { currentUser, battle });
            return;
        }
        
        console.log('üéÅ –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã:', battle.rewards);
        
        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—ã—Ç
            if (battle.rewards.exp > 0) {
                currentUser.experience = (currentUser.experience || 0) + battle.rewards.exp;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                const requiredExp = (currentUser.level || 1) * 100;
                if (currentUser.experience >= requiredExp) {
                    currentUser.level = (currentUser.level || 1) + 1;
                    currentUser.experience = 0;
                    
                    // –ü–æ–≤—ã—à–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—ã –Ω–∞ 1
                    if (currentUser.stats) {
                        Object.keys(currentUser.stats).forEach(stat => {
                            currentUser.stats[stat] += 1;
                        });
                    }
                    
                    // –î–∞–µ–º 50 –∑–æ–ª–æ—Ç–∞ –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                    currentUser.gold = (currentUser.gold || 0) + 50;
                    
                    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                    currentUser.health = 50 + (currentUser.stats?.end || 1) * 10;
                    
                    console.log(`üéâ –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${currentUser.level}`);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
                    setTimeout(() => {
                        alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${currentUser.level} —É—Ä–æ–≤–Ω—è!\n–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 1.\n–ë–æ–Ω—É—Å: +50 –∑–æ–ª–æ—Ç–∞!`);
                    }, 500);
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–æ–ª–æ—Ç–æ
            currentUser.gold = Math.max(0, (currentUser.gold || 0) + battle.rewards.gold);
            
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
            await window.authSystem.saveCurrentUser();
            
            console.log('‚úÖ –ù–∞–≥—Ä–∞–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            setTimeout(() => {
                window.authSystem.displayPlayerInfo(currentUser);
            }, 100);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }
        
        console.log('‚úÖ –ù–∞–≥—Ä–∞–¥—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:', {
            exp: battle.rewards.exp,
            gold: battle.rewards.gold,
            newGold: currentUser.gold,
            newExp: currentUser.experience,
            level: currentUser.level
        });
    }
    
    /**
     * –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞—Ä–µ–Ω—É
     */
    returnToArena() {
        this.currentBattle = null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        const currentUser = window.authSystem.getCurrentUser();
        this.updateArenaDisplay(currentUser);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        window.authSystem.displayPlayerInfo(currentUser);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–æ—Ä—Ç–∑–∞–ª
     */
    showGym() {
        const currentUser = window.authSystem.getCurrentUser();
        if (!currentUser) {
            alert('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª
        this.showScreen('gym-screen');
        this.updateGymDisplay(currentUser);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç–∑–∞–ª–∞
     */
    updateGymDisplay(user) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
        document.getElementById('gym-player-gold').textContent = user.gold || 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if (user.stats) {
            document.getElementById('gym-stat-str').textContent = user.stats.str;
            document.getElementById('gym-stat-end').textContent = user.stats.end;
            document.getElementById('gym-stat-dex').textContent = user.stats.dex;
            document.getElementById('gym-stat-int').textContent = user.stats.int;
            document.getElementById('gym-stat-cha').textContent = user.stats.cha;
            document.getElementById('gym-stat-lck').textContent = user.stats.lck;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        this.updateTrainingCosts(user);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
     */
    updateTrainingCosts(user) {
        const baseCosts = {
            str: 2.0,   // –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π
            end: 1.7,   // –í—Ç–æ—Ä–æ–π –ø–æ –¥–æ—Ä–æ–≥–æ–≤–∏–∑–Ω–µ
            dex: 1.2,   // –°—Ä–µ–¥–Ω–∏–π
            lck: 1.1,   // –ß—É—Ç—å –¥–æ—Ä–æ–∂–µ –±–∞–∑—ã
            int: 1.0,   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
            cha: 0.8    // –î–µ—à–µ–≤—ã–π
        };
        
        Object.keys(baseCosts).forEach(stat => {
            const currentLevel = user.stats[stat];
            const cost = Math.floor(baseCosts[stat] * Math.pow(currentLevel, 1.5) * 10);
            
            const costElement = document.getElementById(`gym-cost-${stat}`);
            const buttonElement = document.querySelector(`[data-stat="${stat}"]`);
            
            if (costElement) {
                costElement.textContent = cost;
                
                if (buttonElement) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
                    if (cost > user.gold) {
                        buttonElement.disabled = true;
                        buttonElement.classList.add('cant-afford');
                        buttonElement.classList.remove('expensive');
                    } else {
                        buttonElement.disabled = false;
                        buttonElement.classList.remove('cant-afford');
                        
                        // –ö—Ä–∞—Å–∏–º –¥–æ—Ä–æ–≥–∏–µ —Å—Ç–∞—Ç—ã –≤ –∫—Ä–∞—Å–Ω—ã–π
                        if (stat === 'str' || stat === 'end') {
                            buttonElement.classList.add('expensive');
                        } else {
                            buttonElement.classList.remove('expensive');
                        }
                    }
                }
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Supabase
     */
    initRegisterButton() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¢–û–õ–¨–ö–û Supabase)...');
        
        setTimeout(() => {
            const btnContinueRegistration = document.getElementById('btn-continue-registration');
            
            if (btnContinueRegistration) {
                // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                const newBtn = btnContinueRegistration.cloneNode(true);
                btnContinueRegistration.parentNode.replaceChild(newBtn, btnContinueRegistration);
                
                newBtn.addEventListener('click', async () => {
                    console.log('üéÆ –ö–Ω–æ–ø–∫–∞ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–∂–∞—Ç–∞');
                    
                    try {
                        const form = document.getElementById('register-form');
                        if (!form) {
                            console.error('‚ùå –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                            return;
                        }
                        
                        const formData = new FormData(form);
                        const nickname = formData.get('nickname')?.trim() || '';
                        const password = formData.get('password') || '';
                        const passwordRepeat = formData.get('password-repeat') || '';
                        const faction = formData.get('faction') || '';
                        const gender = formData.get('gender') || '';
                        
                        console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { nickname, faction, gender });
                        
                        // –í–∞–ª–∏–¥–∞—Ü–∏—è
                        if (nickname.length < 3) {
                            alert('–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
                            return;
                        }
                        
                        if (password.length < 6) {
                            alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
                            return;
                        }
                        
                        if (password !== passwordRepeat) {
                            alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
                            return;
                        }
                        
                        if (!faction) {
                            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é');
                            return;
                        }
                        
                        if (!gender) {
                            alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
                            return;
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
                        if (!window.supabaseClient || !window.supabaseClient.isConnected) {
                            alert('–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                            return;
                        }
                        
                        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                        const characterData = {
                            nickname: nickname,
                            faction: faction,
                            gender: gender
                        };
                        
                        console.log('üöÄ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Supabase:', characterData);
                        
                        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
                        const newUser = await window.authSystem.createUser(characterData, password);
                        window.authSystem.setCurrentUser(newUser);
                        
                        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser);
                        
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É
                        this.showScreen('game-screen');
                        window.authSystem.displayPlayerInfo(newUser);
                        
                        alert('üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
                        alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${error.message}`);
                    }
                });
                
                console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω');
            } else {
                console.error('‚ùå –ö–Ω–æ–ø–∫–∞ btn-continue-registration –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            }
        }, 100);
    }
    
    /**
     * –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ Supabase
     */
    async trainStat(statName) {
        const currentUser = window.authSystem.getCurrentUser();
        if (!currentUser) return;
        
        // –ë–∞–∑–æ–≤—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const baseCosts = {
            str: 2.0,   // –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π
            end: 1.7,   // –í—Ç–æ—Ä–æ–π –ø–æ –¥–æ—Ä–æ–≥–æ–≤–∏–∑–Ω–µ
            dex: 1.2,   // –°—Ä–µ–¥–Ω–∏–π
            lck: 1.1,   // –ß—É—Ç—å –¥–æ—Ä–æ–∂–µ –±–∞–∑—ã
            int: 1.0,   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
            cha: 0.8    // –î–µ—à–µ–≤—ã–π
        };
        
        const currentLevel = currentUser.stats[statName];
        const cost = Math.floor(baseCosts[statName] * Math.pow(currentLevel, 1.5) * 10);
        
        if (currentUser.gold < cost) {
            return; // –ü—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏ —Ç—Ä–∞—Ç–∏–º –∑–æ–ª–æ—Ç–æ
        currentUser.stats[statName] += 1;
        currentUser.gold -= cost;
        
        // –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ–º –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        if (statName === 'end') {
            currentUser.health = 50 + currentUser.stats.end * 10;
        }
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
            await window.authSystem.saveCurrentUser();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ
            this.updateGymDisplay(currentUser);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            window.authSystem.displayPlayerInfo(currentUser);
            
            console.log('üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
                stat: statName,
                newLevel: currentUser.stats[statName],
                goldSpent: cost,
                remainingGold: currentUser.gold
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            currentUser.stats[statName] -= 1;
            currentUser.gold += cost;
            if (statName === 'end') {
                currentUser.health = 50 + currentUser.stats.end * 10;
            }
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
     */
    clearForm(formId) {
        const form = document.getElementById(formId);
        if (form) {
            form.reset();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            const inputs = form.querySelectorAll('input');
            inputs.forEach(input => {
                input.style.borderColor = '#444';
            });
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ (–° –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–æ–º —á–µ—Ä–µ–∑ Supabase)
     */
    checkAutoLogin() {
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ª–æ–≥–∏–Ω...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            await this.initializeSupabase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const savedUser = localStorage.getItem('mmo_auto_login');
            
            if (savedUser) {
                try {
                    const userData = JSON.parse(savedUser);
                    console.log('üîÑ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', userData.nickname);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω
                    if (window.supabaseClient && window.supabaseClient.isConnected) {
                        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Supabase
                        const user = await window.supabaseClient.loginPlayer(userData.nickname, userData.password);
                        
                        if (user) {
                            window.authSystem.setCurrentUser(user);
                            this.showScreen('game-screen');
                            window.authSystem.displayPlayerInfo(user);
                            console.log('‚úÖ –ê–≤—Ç–æ–ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω!');
                            return;
                        }
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞:', error);
                    // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    localStorage.removeItem('mmo_auto_login');
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è
            setTimeout(() => {
                this.showScreen('loading-screen');
                console.log('üè† –ü–æ–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω');
            }, 100);
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async initializeSupabase() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Supabase –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (window.supabaseClient) {
                const success = await window.supabaseClient.initialize();
                
                if (success) {
                    console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω! –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º.');
                    this.showConnectionStatus('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
                    
                    // –ó–∞–º–µ–Ω—è–µ–º localStorage –º–µ—Ç–æ–¥—ã –Ω–∞ Supabase
                    this.enableSupabaseMode();
                } else {
                    console.log('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.');
                    this.showConnectionStatus('üíæ –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º', 'warning');
                }
            } else {
                console.log('‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
            this.showConnectionStatus('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error');
        }
    }
    
    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ Supabase
     */
    enableSupabaseMode() {
        // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å authSystem
        if (window.authSystem) {
            const originalCreateUser = window.authSystem.createUser;
            const originalAuthenticateUser = window.authSystem.authenticateUser;
            
            // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            window.authSystem.createUser = async function(characterData, password) {
                if (window.supabaseClient && window.supabaseClient.isConnected) {
                    try {
                        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Supabase:', characterData);
                        const supabaseUser = await window.supabaseClient.registerPlayer(characterData, password);
                        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Supabase:', supabaseUser);
                        return supabaseUser;
                    } catch (error) {
                        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ Supabase, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', error.message);
                        return originalCreateUser.call(this, characterData, password);
                    }
                } else {
                    return originalCreateUser.call(this, characterData, password);
                }
            };
            
            // –ó–∞–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            window.authSystem.authenticateUser = async function(nickname, password) {
                if (window.supabaseClient && window.supabaseClient.isConnected) {
                    try {
                        console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ Supabase:', nickname);
                        const supabaseUser = await window.supabaseClient.loginPlayer(nickname, password);
                        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase:', supabaseUser);
                        return supabaseUser;
                    } catch (error) {
                        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ Supabase, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', error.message);
                        return originalAuthenticateUser.call(this, nickname, password);
                    }
                } else {
                    return originalAuthenticateUser.call(this, nickname, password);
                }
            };
            
            console.log('üîÑ AuthSystem –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Supabase');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    showConnectionStatus(message, type) {
        const statusDiv = document.createElement('div');
        statusDiv.id = 'connection-status';
        statusDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px 15px;
            background: ${type === 'success' ? '#28a745' : type === 'warning' ? '#ffc107' : '#dc3545'};
            color: white;
            border-radius: 5px;
            z-index: 1000;
            font-size: 14px;
            font-weight: 600;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        `;
        statusDiv.textContent = message;
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        const existing = document.getElementById('connection-status');
        if (existing) existing.remove();
        
        document.body.appendChild(statusDiv);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (statusDiv.parentElement) {
                statusDiv.remove();
            }
        }, 5000);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
     */
    showNotification(message, type = 'info') {
        // –¢–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(`[${type.toUpperCase()}] ${message}`);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('active');
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç
     */
    async showChat() {
        try {
            this.showModal('chat-modal');
            await this.loadChatMessages();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞');
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
     */
    async loadChatMessages() {
        if (!window.supabaseClient || !window.supabaseClient.isConnected) {
            return;
        }
        
        try {
            const messages = await window.supabaseClient.getChatMessages(20);
            const chatMessages = document.getElementById('chat-messages');
            
            if (chatMessages) {
                chatMessages.innerHTML = '';
                
                if (messages.length === 0) {
                    chatMessages.innerHTML = '<div class="chat-message system"><span class="chat-time">' + 
                        new Date().toLocaleTimeString('ru', {hour: '2-digit', minute: '2-digit'}) + 
                        '</span><span class="chat-text">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</span></div>';
                    return;
                }
                
                messages.forEach(msg => {
                    const messageDiv = document.createElement('div');
                    const faction = msg.players.faction || 'system';
                    messageDiv.className = `chat-message ${faction}`;
                    
                    const time = new Date(msg.created_at).toLocaleTimeString('ru', {
                        hour: '2-digit', 
                        minute: '2-digit'
                    });
                    
                    messageDiv.innerHTML = `
                        <span class="chat-time">${time}</span>
                        <strong>${msg.players.nickname}:</strong>
                        <span class="chat-text">${msg.message}</span>
                    `;
                    
                    chatMessages.appendChild(messageDiv);
                });
                
                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
     */
    async sendChatMessage() {
        const input = document.getElementById('chat-input');
        if (!input || !input.value.trim()) return;
        
        const message = input.value.trim();
        
        try {
            await window.supabaseClient.sendChatMessage(message);
            input.value = '';
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await this.loadChatMessages();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
     */
    async showRating() {
        try {
            this.showModal('rating-modal');
            await this.loadPlayersRanking();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
     */
    async loadPlayersRanking() {
        if (!window.supabaseClient || !window.supabaseClient.isConnected) {
            return;
        }
        
        try {
            const players = await window.supabaseClient.getPlayersRanking(10);
            const ratingList = document.getElementById('rating-list');
            
            if (ratingList) {
                ratingList.innerHTML = '';
                
                if (players.length === 0) {
                    ratingList.innerHTML = '<div class="rating-item"><span class="rating-name">–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</span></div>';
                    return;
                }
                
                players.forEach((player, index) => {
                    const itemDiv = document.createElement('div');
                    itemDiv.className = 'rating-item';
                    
                    const factionName = player.faction === 'workers' ? '–†–∞–±–æ—Ç—è–≥–∏' : '–ö—Ä–µ–∞–∫–ª—ã';
                    const factionClass = player.faction;
                    
                    itemDiv.innerHTML = `
                        <span class="rating-position">${index + 1}</span>
                        <span class="rating-name">${player.nickname}</span>
                        <span class="rating-faction ${factionClass}">${factionName}</span>
                        <span class="rating-stats">–£—Ä–æ–≤–µ–Ω—å ${player.level} | –°—Ç–∞—Ç—ã: ${player.totalStats}</span>
                    `;
                    
                    ratingList.appendChild(itemDiv);
                });
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
     */
    getGameStats() {
        const users = window.authSystem.getUsers();
        const workersCount = users.filter(user => user.faction === 'workers').length;
        const creativesCount = users.filter(user => user.faction === 'creatives').length;
        
        return {
            totalUsers: users.length,
            workersCount,
            creativesCount,
            currentUser: window.authSystem.getCurrentUser()
        };
    }
    
    /**
     * –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
     */
    getDebugInfo() {
        const currentUser = window.authSystem.getCurrentUser();
        let characterInfo = null;
        
        if (currentUser && currentUser.stats) {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Character –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            const tempCharacter = new Character();
            tempCharacter.stats = currentUser.stats;
            characterInfo = tempCharacter.getCalculatedStats();
        }
        
        return {
            currentScreen: this.currentScreen,
            gameStats: this.getGameStats(),
            currentUserStats: currentUser ? currentUser.stats : null,
            calculatedStats: characterInfo,
            localStorage: {
                users: localStorage.getItem('mmo_rpg_users'),
                currentUser: localStorage.getItem('mmo_rpg_current_user')
            }
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
if (!window.gameApp) {
    window.gameApp = new GameApp();
}

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–±–∞–≥–∞
window.debugGame = () => {
    console.log('=== DEBUG INFO ===');
    console.log(window.gameApp.getDebugInfo());
};

window.debugCharacterCalculations = () => {
    const currentUser = window.authSystem.getCurrentUser();
    if (currentUser && currentUser.stats) {
        const tempCharacter = new Character();
        tempCharacter.stats = currentUser.stats;
        
        console.log('=== –†–ê–°–ß–ï–¢–´ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ===');
        console.log('–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—ã:', currentUser.stats);
        console.log('–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', tempCharacter.getCalculatedStats());
        console.log('HP:', tempCharacter.calculateHealth());
        console.log('–£—Ä–æ–Ω:', tempCharacter.calculateDamage());
        console.log('–®–∞–Ω—Å –¥–≤–æ–π–Ω–æ–≥–æ —É–¥–∞—Ä–∞:', tempCharacter.calculateDoubleHitChance() + '%');
        console.log('–®–∞–Ω—Å —É–≤–æ—Ä–æ—Ç–∞:', tempCharacter.calculateDodgeChance() + '%');
        console.log('–ó–∞—â–∏—Ç–∞:', tempCharacter.calculateDefense());
    } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫');
    }
};

window.clearGameData = () => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
        localStorage.removeItem('mmo_rpg_users');
        localStorage.removeItem('mmo_rpg_current_user');
        window.gameApp.showScreen('loading-screen');
        alert('–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –æ—á–∏—â–µ–Ω—ã!');
    }
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∞—Ä–µ–Ω—ã
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∞—Ä–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
        const findPlayerBtn = document.getElementById('find-player-btn');
        const findMobBtn = document.getElementById('find-mob-btn');
        const startFightBtn = document.getElementById('start-fight-btn');
        const continueBtn = document.getElementById('continue-btn');
        const arenaBackBtn = document.getElementById('arena-back-btn');
        
        if (findPlayerBtn) {
            findPlayerBtn.onclick = async () => {
                console.log('–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –Ω–∞–∂–∞—Ç');
                await window.gameApp.findOpponent('player');
            };
        }
        
        if (findMobBtn) {
            findMobBtn.onclick = async () => {
                console.log('–ü–æ–∏—Å–∫ –º–æ–±–∞ –Ω–∞–∂–∞—Ç');
                await window.gameApp.findOpponent('mob');
            };
        }
        
        if (startFightBtn) {
            startFightBtn.onclick = () => {
                console.log('–ù–∞—á–∞—Ç—å –±–æ–π –Ω–∞–∂–∞—Ç');
                window.gameApp.startBattle();
            };
        }
        
        if (continueBtn) {
            continueBtn.onclick = () => {
                console.log('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–∞—Ç');
                window.gameApp.returnToArena();
            };
        }
        
        if (arenaBackBtn) {
            arenaBackBtn.onclick = () => {
                console.log('–ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É –Ω–∞–∂–∞—Ç');
                window.gameApp.showScreen('game-screen');
            };
        }
        
        console.log('–ö–Ω–æ–ø–∫–∏ –∞—Ä–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã!');
    }, 2000);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
window.checkPlayerState = () => {
    const currentUser = window.authSystem.getCurrentUser();
    const users = window.authSystem.getUsers();
    const userInList = users.find(u => u.id === currentUser?.id);
    
    console.log('=== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–û–ö–ê ===');
    console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–µ—Å—Å–∏—è):', currentUser);
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ:', userInList);
    console.log('–ó–æ–ª–æ—Ç–æ:', currentUser?.gold);
    console.log('–û–ø—ã—Ç:', currentUser?.experience);
    console.log('–£—Ä–æ–≤–µ–Ω—å:', currentUser?.level);
    console.log('localStorage (users):', localStorage.getItem('mmo_rpg_users'));
    console.log('localStorage (current):', localStorage.getItem('mmo_rpg_current_user'));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
window.addGold = (amount) => {
    const currentUser = window.authSystem.getCurrentUser();
    if (!currentUser) {
        console.error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
    }
    
    currentUser.gold = (currentUser.gold || 0) + amount;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const users = window.authSystem.getUsers();
    const userIndex = users.findIndex(u => u.id === currentUser.id);
    if (userIndex !== -1) {
        users[userIndex] = currentUser;
        window.authSystem.saveUsers(users);
        window.authSystem.setCurrentUser(currentUser);
        window.authSystem.displayPlayerInfo(currentUser);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –∑–æ–ª–æ—Ç–∞. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${currentUser.gold}`);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ—è
window.checkLastBattle = () => {
    if (window.gameApp && window.gameApp.currentBattle) {
        console.log('=== –ü–û–°–õ–ï–î–ù–ò–ô –ë–û–ô ===');
        console.log('–î–∞–Ω–Ω—ã–µ –±–æ—è:', window.gameApp.currentBattle);
        console.log('–ù–∞–≥—Ä–∞–¥—ã:', window.gameApp.currentBattle.rewards);
        console.log('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:', window.gameApp.currentBattle.winner);
    } else {
        console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –±–æ–µ');
    }
};

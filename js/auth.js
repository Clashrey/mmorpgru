/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Supabase (–ë–ï–ó localStorage)
 */
class AuthSystem {
    constructor() {
        this.currentUser = null; // –¢–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏!
        this.initializeEventListeners();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    initializeEventListeners() {
        document.addEventListener('DOMContentLoaded', () => {
            // –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
            const loginForm = document.getElementById('login-form');
            if (loginForm) {
                loginForm.addEventListener('submit', (e) => this.handleLogin(e));
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
     */
    async handleLogin(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const nickname = formData.get('nickname').trim();
        const password = formData.get('password');
        
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Supabase:', nickname);
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û Supabase
            const user = await window.supabaseClient.loginPlayer(nickname, password);
            
            if (user) {
                this.setCurrentUser(user);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞
                localStorage.setItem('mmo_auto_login', JSON.stringify({
                    nickname: nickname,
                    password: password
                }));
                
                console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', user);
                window.gameApp.showScreen('game-screen');
                this.displayPlayerInfo(user);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            alert(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Supabase
     */
    async createUser(characterData, password) {
        try {
            console.log('üéÆ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase:', characterData);
            
            const newUser = await window.supabaseClient.registerPlayer(characterData, password);
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser);
            return newUser;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ Supabase)
     */
    userExists(nickname) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤ Supabase –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        return false;
    }
    
    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Supabase
     */
    async authenticateUser(nickname, password) {
        try {
            return await window.supabaseClient.loginPlayer(nickname, password);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            return null;
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¢–û–õ–¨–ö–û –≤ –ø–∞–º—è—Ç–∏)
     */
    setCurrentUser(user) {
        this.currentUser = user;
        window.supabaseClient.setCurrentPlayer(user);
        console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', user.nickname);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¢–û–õ–¨–ö–û –∏–∑ –ø–∞–º—è—Ç–∏)
     */
    getCurrentUser() {
        return this.currentUser || window.supabaseClient.getCurrentPlayer();
    }
    
    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    logout() {
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞
        localStorage.removeItem('mmo_auto_login');
        
        this.currentUser = null;
        window.supabaseClient.logout();
        window.gameApp.showScreen('loading-screen');
        console.log('üö∫ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
    
    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    logout() {
        this.currentUser = null;
        window.supabaseClient.logout();
        window.gameApp.showScreen('loading-screen');
        console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞ - –≤ Supabase —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ)
     */
    async getUsers() {
        // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        return [];
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞ - –≤ Supabase –Ω–µ –Ω—É–∂–Ω–æ)
     */
    async saveUsers(users) {
        // –ó–∞–≥–ª—É—à–∫–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        console.log('üíæ saveUsers() –≤—ã–∑–≤–∞–Ω, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase)');
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async saveCurrentUser() {
        if (!this.currentUser) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return false;
        }
        
        try {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase:', this.currentUser);
            const updatedUser = await window.supabaseClient.savePlayer(this.currentUser);
            this.currentUser = updatedUser;
            this.displayPlayerInfo(updatedUser);
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            return false;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
     */
    displayPlayerInfo(user) {
        try {
            console.log('üé≠ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞:', user);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if (user.stats) {
                const statElements = {
                    'game-stat-str': user.stats.str || 1,
                    'game-stat-int': user.stats.int || 1,
                    'game-stat-cha': user.stats.cha || 1,
                    'game-stat-end': user.stats.end || 1,
                    'game-stat-dex': user.stats.dex || 1,
                    'game-stat-lck': user.stats.lck || 1
                };
                
                for (const [id, value] of Object.entries(statElements)) {
                    const element = document.getElementById(id);
                    if (element) {
                        element.textContent = value;
                    }
                }
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const infoElements = {
                'character-display-name': user.nickname || '–ò–≥—Ä–æ–∫',
                'game-level': user.level || 1,
                'game-experience': user.experience || 0,
                'game-gold': user.gold || 100
            };
            
            for (const [id, value] of Object.entries(infoElements)) {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                }
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º HP: 50 + END * 10
            const calculatedHP = user.stats ? (50 + user.stats.end * 10) : (user.health || 105);
            const healthElement = document.getElementById('game-health');
            if (healthElement) {
                healthElement.textContent = calculatedHP;
            }
            
            // –§—Ä–∞–∫—Ü–∏—è
            const factionBadge = document.getElementById('character-faction-badge');
            if (factionBadge && user.faction) {
                const factionName = user.faction === 'workers' ? '–†–∞–±–æ—Ç—è–≥–∏' : '–ö—Ä–µ–∞–∫–ª—ã';
                factionBadge.textContent = factionName;
            }
            
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
     */
    completeCharacterCreation() {
        console.log('‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Supabase');
        return false;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        alert(message);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
if (!window.authSystem) {
    window.authSystem = new AuthSystem();
    console.log('üîê AuthSystem —Å–æ–∑–¥–∞–Ω (–¢–û–õ–¨–ö–û Supabase)');
}
/**
 * –ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ú–ú–û-–†–ü–ì
 */
class BattleSystem {
    constructor() {
        this.currentBattle = null;
        this.mobNames = [
            '–ó–ª–æ–π –ì–æ–±–ª–∏–Ω', '–î–∏–∫–∏–π –í–æ–ª–∫', '–ë–∞–Ω–¥–∏—Ç', '–°–∫–µ–ª–µ—Ç-–≤–æ–∏–Ω', '–û—Ä–∫-–±–µ—Ä—Å–µ—Ä–∫',
            '–ó–æ–º–±–∏', '–ü–∞—É–∫-–æ—Ö–æ—Ç–Ω–∏–∫', '–¢–µ–º–Ω—ã–π –º–∞–≥', '–†–∞–∑–±–æ–π–Ω–∏–∫', '–¢—Ä–æ–ª–ª—å'
        ];
        this.initializeEventListeners();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    initializeEventListeners() {
        document.addEventListener('DOMContentLoaded', () => {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
                // –ö–Ω–æ–ø–∫–∏ –≤ –∞—Ä–µ–Ω–µ
                const findPlayerBtn = document.getElementById('find-player-btn');
                const findMobBtn = document.getElementById('find-mob-btn');
                const startFightBtn = document.getElementById('start-fight-btn');
                const continueBtn = document.getElementById('continue-btn');
                const arenaBackBtn = document.getElementById('arena-back-btn');
                const gymBackBtn = document.getElementById('gym-back-btn');
                
                if (findPlayerBtn) {
                    findPlayerBtn.addEventListener('click', () => this.findOpponent('player'));
                }
                
                if (findMobBtn) {
                    findMobBtn.addEventListener('click', () => this.findOpponent('mob'));
                }
                
                if (startFightBtn) {
                    startFightBtn.addEventListener('click', () => this.startBattle());
                }
                
                if (continueBtn) {
                    continueBtn.addEventListener('click', () => this.returnToArena());
                }
                
                if (arenaBackBtn) {
                    arenaBackBtn.addEventListener('click', () => this.backToGame());
                }
                
                if (gymBackBtn) {
                    gymBackBtn.addEventListener('click', () => this.backToGame());
                }
                
                // –ö–Ω–æ–ø–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ
                document.querySelectorAll('.upgrade-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const stat = e.target.dataset.stat;
                        if (window.gameApp && window.gameApp.trainStat) {
                            window.gameApp.trainStat(stat);
                        }
                    });
                });
            }, 500);
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä–µ–Ω—É
     */
    showArena() {
        const currentUser = window.authSystem.getCurrentUser();
        if (!currentUser) return;
        
        window.gameApp.showScreen('arena-screen');
        this.updateArenaDisplay(currentUser);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä–µ–Ω—ã
     */
    updateArenaDisplay(user) {
        const battleStats = this.calculateBattleStats(user);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
        document.getElementById('arena-player-name').textContent = user.nickname;
        document.getElementById('arena-player-hp').textContent = battleStats.hp;
        document.getElementById('arena-player-attack').textContent = battleStats.attack;
        document.getElementById('arena-player-defense').textContent = battleStats.defense;
        
        const factionName = user.faction === 'workers' ? '–†–∞–±–æ—Ç—è–≥–∏' : '–ö—Ä–µ–∞–∫–ª—ã';
        document.getElementById('arena-player-faction').textContent = factionName;
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–æ–µ–≤
        document.getElementById('battle-result').style.display = 'none';
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
     */
    calculateBattleStats(user) {
        const stats = user.stats || {};
        
        return {
            hp: 50 + (stats.end || 1) * 10,
            attack: 10 + (stats.str || 1) * 3,
            defense: (stats.end || 1) * 2,
            dodgeChance: ((stats.dex || 1) * 1.5 + (stats.int || 1) * 2 + (stats.lck || 1) * 1),
            doubleHitChance: ((stats.dex || 1) * 2 + (stats.lck || 1) * 1.5),
            speed: stats.dex || 1
        };
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –±–æ—é
     */
    showBattleSetup(player, opponent) {
        const playerStats = this.calculateBattleStats(player);
        const opponentStats = this.calculateBattleStats(opponent);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        document.getElementById('fighter1-name').textContent = player.nickname;
        document.getElementById('fighter1-hp').textContent = playerStats.hp;
        document.getElementById('fighter1-attack').textContent = playerStats.attack;
        document.getElementById('fighter1-defense').textContent = playerStats.defense;
        
        const playerFaction = player.faction === 'workers' ? '–†–∞–±–æ—Ç—è–≥–∏' : '–ö—Ä–µ–∞–∫–ª—ã';
        document.getElementById('fighter1-faction').textContent = playerFaction;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        document.getElementById('fighter2-name').textContent = opponent.nickname;
        document.getElementById('fighter2-hp').textContent = opponentStats.hp;
        document.getElementById('fighter2-attack').textContent = opponentStats.attack;
        document.getElementById('fighter2-defense').textContent = opponentStats.defense;
        
        const opponentFaction = opponent.faction === 'workers' ? '–†–∞–±–æ—Ç—è–≥–∏' : '–ö—Ä–µ–∞–∫–ª—ã';
        document.getElementById('fighter2-faction').textContent = opponentFaction;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—è
        this.currentBattle = {
            player: { ...player, battleStats: playerStats },
            opponent: { ...opponent, battleStats: opponentStats },
            log: [],
            winner: null,
            rewards: null
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        document.getElementById('battle-result').style.display = 'block';
        document.getElementById('battle-log').style.display = 'none';
        document.getElementById('battle-outcome').style.display = 'none';
        document.getElementById('start-fight-btn').style.display = 'block';
    }
    
    /**
     * –ù–∞—á–∞—Ç—å –±–æ–π
     */
    startBattle() {
        if (!this.currentBattle) return;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –±–æ—è
        document.getElementById('start-fight-btn').style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ –±–æ—è
        document.getElementById('battle-log').style.display = 'block';
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –±–æ–π
        this.simulateBattle();
    }
    
    /**
     * –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞—Ä–µ–Ω—É
     */
    returnToArena() {
        this.currentBattle = null;
        document.getElementById('battle-result').style.display = 'none';
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã —á–µ—Ä–µ–∑ Supabase
     */
    async saveRewards(user, exp, gold) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Supabase
            const updatedUser = await window.supabaseClient.savePlayer(user);
            window.authSystem.setCurrentUser(updatedUser);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (window.authSystem.displayPlayerInfo) {
                window.authSystem.displayPlayerInfo(updatedUser);
            }
            
            console.log('‚úÖ –ù–∞–≥—Ä–∞–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }
    }
    
    /**
     * –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É
     */
    backToGame() {
        if (window.gameApp) {
            window.gameApp.showScreen('game-screen');
        }
    }
    
    /**
     * –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ–π
     */
    simulateBattle() {
        const battle = this.currentBattle;
        if (!battle) return;
        
        // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –±–æ—è
        const isVictory = Math.random() > 0.3; // 70% —à–∞–Ω—Å –ø–æ–±–µ–¥—ã
        
        setTimeout(() => {
            this.showBattleOutcome(isVictory);
        }, 2000);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
     */
    showBattleOutcome(isVictory) {
        document.getElementById('battle-log').style.display = 'none';
        
        const outcomeDiv = document.getElementById('battle-outcome');
        
        if (isVictory) {
            outcomeDiv.className = 'battle-outcome';
            document.getElementById('outcome-title').textContent = 'üèÜ –ü–û–ë–ï–î–ê!';
            document.getElementById('outcome-description').textContent = '–í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–±–µ–¥—É!';
            
            // –ù–∞–≥—Ä–∞–¥—ã
            const exp = 10 + Math.floor(Math.random() * 10);
            const gold = 25 + Math.floor(Math.random() * 50);
            
            document.getElementById('reward-exp').textContent = exp;
            document.getElementById('reward-gold').textContent = gold;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ Supabase
            const currentUser = window.authSystem.getCurrentUser();
            if (currentUser) {
                currentUser.experience = (currentUser.experience || 0) + exp;
                currentUser.gold = (currentUser.gold || 0) + gold;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ Supabase
                this.saveRewards(currentUser, exp, gold);
            }
        } else {
            outcomeDiv.className = 'battle-outcome defeat';
            document.getElementById('outcome-title').textContent = 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï';
            document.getElementById('outcome-description').textContent = '–í—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...';
            
            document.getElementById('reward-exp').textContent = '0';
            document.getElementById('reward-gold').textContent = '0';
        }
        
        outcomeDiv.style.display = 'block';
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
if (!window.battleSystem) {
    window.battleSystem = new BattleSystem();
}

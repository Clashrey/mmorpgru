// js/map-location/map-battles.js - –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –±–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
class MapBattleSystem {
    constructor() {
        this.actionTypes = this.initializeActionTypes();
        this.mobAbilities = this.initializeMobAbilities();
        
        console.log('‚öîÔ∏è MapBattleSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤
     */
    initializeActionTypes() {
        return {
            attack: {
                name: '‚öîÔ∏è –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞',
                description: '–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ —Å –ø–æ–ª–Ω—ã–º —É—Ä–æ–Ω–æ–º',
                damageMultiplier: 1.0,
                cooldown: 0,
                alwaysAvailable: true
            },
            power_strike: {
                name: 'üí• –ú–æ—â–Ω—ã–π —É–¥–∞—Ä',
                description: '–°–∏–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —É—Ä–æ–Ω–æ–º',
                damageMultiplier: 1.8,
                cooldown: 3,
                alwaysAvailable: false
            },
            defend: {
                name: 'üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∞—è —Å—Ç–æ–π–∫–∞', 
                description: '–°–Ω–∏–∂–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —É—Ä–æ–Ω –Ω–∞ 60%',
                damageReduction: 0.6,
                cooldown: 0,
                alwaysAvailable: true
            },
            heal: {
                name: 'üíö –ò—Å—Ü–µ–ª–µ–Ω–∏–µ',
                description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 35% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ HP',
                healPercent: 0.35,
                maxUses: 2,
                alwaysAvailable: false
            }
        };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –º–æ–±–æ–≤
     */
    initializeMobAbilities() {
        return {
            // –õ–µ—Å–Ω–æ–π –í–æ–ª–∫
            bite: {
                name: '–ö—É—Å—å',
                description: '–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞',
                type: 'single_attack',
                damageMultiplier: 1.0
            },
            howl: {
                name: '–í–æ–π',
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∞—Ç–∞–∫—É –Ω–∞ 15% –Ω–∞ 2 —Ö–æ–¥–∞',
                type: 'buff',
                frequency: 4, // –∫–∞–∂–¥—ã–π 4-–π —Ö–æ–¥
                effect: { attackBonus: 0.15, duration: 2 }
            },
            
            // –ì–æ—Ä–Ω—ã–π –¢—Ä–æ–ª–ª—å
            club_hit: {
                name: '–£–¥–∞—Ä –¥—É–±–∏–Ω–æ–π',
                description: '–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞ –¥—É–±–∏–Ω–æ–π',
                type: 'single_attack',
                damageMultiplier: 1.0
            },
            earthquake: {
                name: '–ó–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ',
                description: '–ê–û–ï –∞—Ç–∞–∫–∞ –ø–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º',
                type: 'aoe_attack',
                frequency: 3,
                damageMultiplier: 0.75 // –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞, –Ω–æ –≤—Å–µ–º
            },
            thick_skin: {
                name: '–¢–æ–ª—Å—Ç–∞—è –∫–æ–∂–∞',
                description: '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —É—Ä–æ–Ω –Ω–∞ 10%',
                type: 'passive',
                effect: { damageReduction: 0.1 }
            },
            
            // –õ–µ–¥—è–Ω–æ–π –ì–æ–ª–µ–º
            ice_shard: {
                name: '–õ–µ–¥—ã—à–∫–∞',
                description: '–ê—Ç–∞–∫–∞ —Å —à–∞–Ω—Å–æ–º –∑–∞–º–æ—Ä–æ–∑–∫–∏',
                type: 'single_attack',
                damageMultiplier: 1.0,
                freezeChance: 0.15
            },
            ice_storm: {
                name: '–õ–µ–¥—è–Ω–∞—è –±—É—Ä—è',
                description: '–ê–û–ï –∞—Ç–∞–∫–∞ —Å —à–∞–Ω—Å–æ–º –∑–∞–º–æ—Ä–æ–∑–∫–∏',
                type: 'aoe_attack',
                frequency: 3,
                damageMultiplier: 0.8,
                freezeChance: 0.3
            },
            regeneration: {
                name: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
                description: '–õ–µ—á–∏—Ç 20% HP –ø—Ä–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∏–∂–µ 30%',
                type: 'heal',
                trigger: 0.3, // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ HP < 30%
                healPercent: 0.2,
                maxUses: 1
            },
            
            // –û–≥–Ω–µ–Ω–Ω—ã–π –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å
            fireball: {
                name: '–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä',
                description: '–û–±—ã—á–Ω–∞—è –æ–≥–Ω–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞',
                type: 'single_attack',
                damageMultiplier: 1.0
            },
            inferno: {
                name: '–ò–Ω—Ñ–µ—Ä–Ω–æ',
                description: '–ú–æ—â–Ω–∞—è –ê–û–ï –æ–≥–Ω–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞',
                type: 'aoe_attack',
                frequency: 3,
                damageMultiplier: 1.2
            },
            flame_rage: {
                name: '–Ø—Ä–æ—Å—Ç—å –ø–ª–∞–º–µ–Ω–∏',
                description: '–ü—Ä–∏ HP < 25% –ø–æ–ª—É—á–∞–µ—Ç +40% –∞—Ç–∞–∫–∏',
                type: 'conditional_buff',
                trigger: 0.25,
                effect: { attackBonus: 0.4, permanent: true }
            },
            
            // –î—Ä–µ–≤–Ω–∏–π –î—Ä–∞–∫–æ–Ω
            claw_strike: {
                name: '–£–¥–∞—Ä –∫–æ–≥—Ç—è–º–∏',
                description: '–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞ –∫–æ–≥—Ç—è–º–∏',
                type: 'single_attack', 
                damageMultiplier: 1.0
            },
            fire_breath: {
                name: '–û–≥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ',
                description: '–ê–û–ï –∞—Ç–∞–∫–∞ –æ–≥–Ω–µ–Ω–Ω—ã–º –¥—ã—Ö–∞–Ω–∏–µ–º',
                type: 'aoe_attack',
                frequency: 2,
                damageMultiplier: 1.1
            },
            sky_rage: {
                name: '–ù–µ–±–µ—Å–Ω–∞—è —è—Ä–æ—Å—Ç—å',
                description: '–ü—Ä–∏ HP < 50% –∫–∞–∂–¥—ã–π —Ö–æ–¥ –ê–û–ï + –æ–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞',
                type: 'conditional_attack_pattern',
                trigger: 0.5
            },
            last_breath: {
                name: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∑–¥–æ—Ö',
                description: '–ü—Ä–∏ HP < 10% –æ—Ç—á–∞—è–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ —Å —Ç—Ä–æ–π–Ω—ã–º —É—Ä–æ–Ω–æ–º',
                type: 'desperate_attack',
                trigger: 0.1,
                damageMultiplier: 3.0
            }
        };
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
     */
    processPlayerAction(battleData, playerNickname, actionType) {
        const player = battleData.players.find(p => p.nickname === playerNickname);
        if (!player) {
            throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—é');
        }
        
        const action = this.actionTypes[actionType];
        if (!action) {
            throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
        if (!this.isActionAvailable(player, actionType)) {
            throw new Error('–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
        battleData.playerActions[playerNickname] = {
            type: actionType,
            action: action,
            timestamp: Date.now()
        };
        
        console.log(`üéÆ ${playerNickname} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: ${action.name}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä
        if (Object.keys(battleData.playerActions).length === battleData.players.length) {
            this.executeTurn(battleData);
        }
        
        return { success: true, message: `–í—ã–±—Ä–∞–Ω–æ: ${action.name}` };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
     */
    isActionAvailable(player, actionType) {
        const action = this.actionTypes[actionType];
        
        // –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if (action.alwaysAvailable) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –º–æ—â–Ω–æ–≥–æ —É–¥–∞—Ä–∞
        if (actionType === 'power_strike') {
            return player.actions.powerStrikeCooldown <= 0;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –ª–µ—á–µ–Ω–∏—è
        if (actionType === 'heal') {
            return player.actions.healsUsed < action.maxUses;
        }
        
        return false;
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ–¥ –±–æ—è
     */
    executeTurn(battleData) {
        console.log(`‚öîÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ–¥ ${battleData.currentTurn}`);
        
        const turnLog = [];
        
        // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤
        this.processPlayerActions(battleData, turnLog);
        
        // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –º–æ–±–∞
        this.processMobAction(battleData, turnLog);
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–æ—è
        const battleResult = this.checkBattleEnd(battleData);
        
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.updateEffects(battleData);
        
        // 5. –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –±–æ–π
        battleData.battleLog.push(...turnLog);
        
        // 6. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –±–æ–π
        if (battleResult) {
            this.finishBattle(battleData, battleResult);
        } else {
            battleData.currentTurn++;
            battleData.playerActions = {}; // –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ö–æ–¥–∞
        }
        
        return battleResult;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤
     */
    processPlayerActions(battleData, turnLog) {
        const players = battleData.players;
        const actions = battleData.playerActions;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–æ-–∞—Ç–∞–∫–∏
        const actionTypes = Object.values(actions).map(a => a.type);
        const isCombo = actionTypes.length === 2 && actionTypes[0] === actionTypes[1];
        
        if (isCombo) {
            const comboType = actionTypes[0];
            turnLog.push({
                type: 'combo',
                message: `‚ú® –ö–û–ú–ë–û! –û–±–∞ –∏–≥—Ä–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç ${this.actionTypes[comboType].name}`,
                turn: battleData.currentTurn
            });
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        for (const player of players) {
            if (player.currentHp <= 0) continue; // –ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É—é—Ç
            
            const playerAction = actions[player.nickname];
            if (!playerAction) continue;
            
            this.executePlayerAction(battleData, player, playerAction, isCombo, turnLog);
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
     */
    executePlayerAction(battleData, player, playerAction, isCombo, turnLog) {
        const action = playerAction.action;
        const actionType = playerAction.type;
        
        switch (actionType) {
            case 'attack':
            case 'power_strike':
                let damage = player.stats.attack * action.damageMultiplier;
                
                // –ö–æ–º–±–æ-–±–æ–Ω—É—Å
                if (isCombo) {
                    if (actionType === 'attack') damage *= 1.2; // +20%
                    if (actionType === 'power_strike') damage *= 1.5; // +50%
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω –∫ –º–æ–±—É
                const mobDefense = battleData.mobData.defense || 0;
                const finalDamage = Math.max(1, Math.floor(damage - mobDefense));
                
                battleData.mobData.currentHp -= finalDamage;
                battleData.mobData.currentHp = Math.max(0, battleData.mobData.currentHp);
                
                turnLog.push({
                    type: 'player_attack',
                    message: `${player.nickname} –Ω–∞–Ω–æ—Å–∏—Ç ${finalDamage} —É—Ä–æ–Ω–∞ (${action.name})`,
                    turn: battleData.currentTurn
                });
                
                // –ö—É–ª–¥–∞—É–Ω –¥–ª—è –º–æ—â–Ω–æ–≥–æ —É–¥–∞—Ä–∞
                if (actionType === 'power_strike') {
                    player.actions.powerStrikeCooldown = action.cooldown;
                }
                break;
                
            case 'defend':
                player.actions.isDefending = true;
                
                turnLog.push({
                    type: 'player_defend',
                    message: `${player.nickname} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—â–∏—Ç–Ω—É—é —Å—Ç–æ–π–∫—É`,
                    turn: battleData.currentTurn
                });
                
                // –ö–æ–º–±–æ-–±–æ–Ω—É—Å –¥–ª—è –∑–∞—â–∏—Ç—ã
                if (isCombo) {
                    player.actions.comboDefenseBonus = 0.2; // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +20% –∑–∞—â–∏—Ç—ã
                    turnLog.push({
                        type: 'combo_defense',
                        message: `‚ú® –ü–∞—Ä–Ω—ã–π –±–ª–æ–∫! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è ${player.nickname}`,
                        turn: battleData.currentTurn
                    });
                }
                break;
                
            case 'heal':
                const healAmount = Math.floor(player.maxHp * action.healPercent);
                const actualHeal = Math.min(healAmount, player.maxHp - player.currentHp);
                
                player.currentHp += actualHeal;
                player.actions.healsUsed++;
                
                turnLog.push({
                    type: 'player_heal',
                    message: `${player.nickname} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ${actualHeal} HP (${action.name})`,
                    turn: battleData.currentTurn
                });
                break;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–±–∞
     */
    processMobAction(battleData, turnLog) {
        const mob = battleData.mobData;
        if (mob.currentHp <= 0) return; // –ú–µ—Ä—Ç–≤—ã–π –º–æ–± –Ω–µ –∞—Ç–∞–∫—É–µ—Ç
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–±–∞
        const ability = this.selectMobAbility(battleData);
        const abilityData = this.mobAbilities[ability];
        
        console.log(`üëπ ${mob.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: ${abilityData.name}`);
        
        this.executeMobAbility(battleData, ability, abilityData, turnLog);
    }
    
    /**
     * –í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–±–∞
     */
    selectMobAbility(battleData) {
        const mob = battleData.mobData;
        const turn = battleData.currentTurn;
        const hpPercent = mob.currentHp / mob.maxHp;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è
        if (mob.id === 'dragon' && hpPercent <= 0.1) {
            return 'last_breath'; // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∑–¥–æ—Ö –¥—Ä–∞–∫–æ–Ω–∞
        }
        
        if (mob.id === 'elemental' && hpPercent <= 0.25 && !mob.rageActivated) {
            mob.rageActivated = true;
            return 'flame_rage';
        }
        
        if (mob.id === 'golem' && hpPercent <= 0.3 && !mob.regenerationUsed) {
            mob.regenerationUsed = true;
            return 'regeneration';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        for (const ability of mob.abilities) {
            const abilityData = this.mobAbilities[ability];
            if (abilityData.frequency && turn % abilityData.frequency === 0) {
                return ability;
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é –∞—Ç–∞–∫—É
        return mob.abilities[0] || 'bite';
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–±–∞
     */
    executeMobAbility(battleData, abilityId, abilityData, turnLog) {
        const mob = battleData.mobData;
        const alivePlayers = battleData.players.filter(p => p.currentHp > 0);
        
        switch (abilityData.type) {
            case 'single_attack':
                if (alivePlayers.length > 0) {
                    const target = alivePlayers[Math.floor(Math.random() * alivePlayers.length)];
                    this.mobAttackPlayer(battleData, target, abilityData, turnLog);
                }
                break;
                
            case 'aoe_attack':
                for (const player of alivePlayers) {
                    this.mobAttackPlayer(battleData, player, abilityData, turnLog);
                }
                break;
                
            case 'buff':
                if (!mob.buffs) mob.buffs = {};
                mob.buffs.attackBonus = {
                    value: abilityData.effect.attackBonus,
                    duration: abilityData.effect.duration
                };
                
                turnLog.push({
                    type: 'mob_buff',
                    message: `${mob.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ${abilityData.name}! –ê—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!`,
                    turn: battleData.currentTurn
                });
                break;
                
            case 'heal':
                const healAmount = Math.floor(mob.maxHp * abilityData.healPercent);
                const actualHeal = Math.min(healAmount, mob.maxHp - mob.currentHp);
                
                mob.currentHp += actualHeal;
                
                turnLog.push({
                    type: 'mob_heal',
                    message: `${mob.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ${abilityData.name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ${actualHeal} HP!`,
                    turn: battleData.currentTurn
                });
                break;
                
            case 'conditional_buff':
                if (!mob.permanentBuffs) mob.permanentBuffs = {};
                mob.permanentBuffs.attackBonus = abilityData.effect.attackBonus;
                
                turnLog.push({
                    type: 'mob_rage',
                    message: `${mob.name} –≤–ø–∞–¥–∞–µ—Ç –≤ —è—Ä–æ—Å—Ç—å! –ê—Ç–∞–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∞!`,
                    turn: battleData.currentTurn
                });
                break;
        }
    }
    
    /**
     * –ê—Ç–∞–∫–∞ –º–æ–±–∞ –ø–æ –∏–≥—Ä–æ–∫—É
     */
    mobAttackPlayer(battleData, player, abilityData, turnLog) {
        const mob = battleData.mobData;
        let damage = mob.attack * (abilityData.damageMultiplier || 1.0);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—Ñ—ã –º–æ–±–∞
        if (mob.buffs && mob.buffs.attackBonus) {
            damage *= (1 + mob.buffs.attackBonus.value);
        }
        if (mob.permanentBuffs && mob.permanentBuffs.attackBonus) {
            damage *= (1 + mob.permanentBuffs.attackBonus);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç—É –∏–≥—Ä–æ–∫–∞
        if (player.actions.isDefending) {
            damage *= 0.4; // 60% —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
            if (player.actions.comboDefenseBonus) {
                damage *= (1 - player.actions.comboDefenseBonus); // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–º–±–æ
            }
        }
        
        const finalDamage = Math.max(1, Math.floor(damage));
        player.currentHp -= finalDamage;
        player.currentHp = Math.max(0, player.currentHp);
        
        const defenseText = player.actions.isDefending ? ' (–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!)' : '';
        turnLog.push({
            type: 'mob_attack',
            message: `${mob.name} –Ω–∞–Ω–æ—Å–∏—Ç ${finalDamage} —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫—É ${player.nickname}${defenseText}`,
            turn: battleData.currentTurn
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É
        if (abilityData.freezeChance && Math.random() < abilityData.freezeChance) {
            if (!player.effects) player.effects = {};
            player.effects.frozen = { duration: 1 };
            
            turnLog.push({
                type: 'freeze',
                message: `‚ùÑÔ∏è ${player.nickname} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥!`,
                turn: battleData.currentTurn
            });
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–æ—è
     */
    checkBattleEnd(battleData) {
        const mob = battleData.mobData;
        const alivePlayers = battleData.players.filter(p => p.currentHp > 0);
        
        if (mob.currentHp <= 0) {
            return {
                result: 'victory',
                winners: battleData.players.map(p => p.nickname),
                message: `üèÜ –ü–æ–±–µ–¥–∞! ${mob.name} –ø–æ–≤–µ—Ä–∂–µ–Ω!`
            };
        }
        
        if (alivePlayers.length === 0) {
            return {
                result: 'defeat',
                message: `üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–∞–ª–∏ –≤ –±–æ—é —Å ${mob.name}`
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤ (30)
        if (battleData.currentTurn >= 30) {
            return {
                result: 'timeout',
                message: `‚è∞ –ë–æ–π –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏! ${mob.name} –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã–º`
            };
        }
        
        return null; // –ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∫—É–ª–¥–∞—É–Ω—ã
     */
    updateEffects(battleData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã –∏–≥—Ä–æ–∫–æ–≤
        for (const player of battleData.players) {
            if (player.actions.powerStrikeCooldown > 0) {
                player.actions.powerStrikeCooldown--;
            }
            
            // –°–±—Ä–æ—Å –∑–∞—â–∏—Ç—ã (–¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ö–æ–¥)
            player.actions.isDefending = false;
            player.actions.comboDefenseBonus = null;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–≥—Ä–æ–∫–∞
            if (player.effects) {
                for (const [effect, data] of Object.entries(player.effects)) {
                    if (data.duration > 0) {
                        data.duration--;
                        if (data.duration <= 0) {
                            delete player.effects[effect];
                        }
                    }
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ñ—Ñ—ã –º–æ–±–∞
        const mob = battleData.mobData;
        if (mob.buffs) {
            for (const [buff, data] of Object.entries(mob.buffs)) {
                if (data.duration > 0) {
                    data.duration--;
                    if (data.duration <= 0) {
                        delete mob.buffs[buff];
                    }
                }
            }
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–æ–π
     */
    finishBattle(battleData, result) {
        battleData.status = 'finished';
        battleData.result = result;
        battleData.finishedAt = Date.now();
        
        console.log(`üèÅ –ë–æ–π ${battleData.id} –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.result}`);
        
        // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∞ - –≤—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        if (result.result === 'victory') {
            this.distributeRewards(battleData);
        }
        
        // –£–¥–∞–ª—è–µ–º –±–æ–π –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            if (window.mapSystem && window.mapSystem.activeBattles) {
                window.mapSystem.activeBattles.delete(battleData.id);
            }
        }, 300000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    }
    
    /**
     * –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
     */
    distributeRewards(battleData) {
        const mob = battleData.mobData;
        const rewards = mob.rewards;
        
        for (const player of battleData.players) {
            // –ö—Ä–∏—Å—Ç–∞–ª–ª—ã
            const crystals = Math.floor(Math.random() * (rewards.crystals[1] - rewards.crystals[0] + 1)) + rewards.crystals[0];
            window.mapSystem.addCrystals(player.nickname, crystals);
            
            // –û–ø—ã—Ç –∏ –∑–æ–ª–æ—Ç–æ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π)
            const exp = Math.floor(Math.random() * (rewards.exp[1] - rewards.exp[0] + 1)) + rewards.exp[0];
            const gold = Math.floor(Math.random() * (rewards.gold[1] - rewards.gold[0] + 1)) + rewards.gold[0];
            
            // –ü—Ä–µ–¥–º–µ—Ç (—Ç–æ–ª—å–∫–æ —Å –±–æ—Å—Å–∞)
            if (mob.isBoss && rewards.itemChance && Math.random() * 100 < rewards.itemChance) {
                const item = this.generateRandomItem();
                window.mapSystem.addItem(player.nickname, item);
            }
            
            // –û—Ç–º–µ—á–∞–µ–º –º–æ–±–∞ –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ
            window.mapSystem.markMobCompleted(player.nickname, mob.id);
            
            console.log(`üéÅ –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è ${player.nickname}: ${crystals} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤, ${exp} –æ–ø—ã—Ç–∞, ${gold} –∑–æ–ª–æ—Ç–∞`);
        }
    }
    
    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
     */
    generateRandomItem() {
        const itemTypes = [
            { type: 'weapon', name: '–û—Ä—É–∂–∏–µ', statBonus: 'attack', icon: '‚öîÔ∏è' },
            { type: 'armor', name: '–ë—Ä–æ–Ω—è', statBonus: 'defense', icon: 'üõ°Ô∏è' },
            { type: 'accessory', name: '–ê–∫—Å–µ—Å—Å—É–∞—Ä', statBonus: 'random', icon: 'üíç' }
        ];
        
        const rarities = [
            { rarity: 'common', name: '–û–±—ã—á–Ω—ã–π', chance: 70, multiplier: 1.0, color: 'üü¢' },
            { rarity: 'rare', name: '–†–µ–¥–∫–∏–π', chance: 25, multiplier: 1.5, color: 'üîµ' },
            { rarity: 'epic', name: '–≠–ø–∏—á–µ—Å–∫–∏–π', chance: 5, multiplier: 2.0, color: 'üü£' }
        ];
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
        const itemType = itemTypes[Math.floor(Math.random() * itemTypes.length)];
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
        const rarityRoll = Math.random() * 100;
        let selectedRarity = rarities[0]; // common –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let chanceSum = 0;
        
        for (const rarity of rarities) {
            chanceSum += rarity.chance;
            if (rarityRoll <= chanceSum) {
                selectedRarity = rarity;
                break;
            }
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –±–æ–Ω—É—Å–∞
        let statBonus = itemType.statBonus;
        if (statBonus === 'random') {
            const stats = ['str', 'end', 'dex', 'int', 'cha', 'lck'];
            statBonus = stats[Math.floor(Math.random() * stats.length)];
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
        const baseBonusRange = { min: 2, max: 5 };
        if (itemType.type === 'armor') {
            baseBonusRange.min = 3;
            baseBonusRange.max = 8;
        } else if (itemType.type === 'weapon') {
            baseBonusRange.min = 4; 
            baseBonusRange.max = 10;
        }
        
        const baseBonus = Math.floor(Math.random() * (baseBonusRange.max - baseBonusRange.min + 1)) + baseBonusRange.min;
        const finalBonus = Math.floor(baseBonus * selectedRarity.multiplier);
        
        return {
            name: `${selectedRarity.color} ${selectedRarity.name} ${itemType.name}`,
            type: itemType.type,
            rarity: selectedRarity.rarity,
            stat: statBonus,
            bonus: finalBonus,
            icon: itemType.icon
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
if (!window.mapBattleSystem) {
    window.mapBattleSystem = new MapBattleSystem();
    console.log('‚öîÔ∏è –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –±–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}
// js/map-location/map-system.js - –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–∫–∞—Ü–∏–∏ "–ö–∞—Ä—Ç–∞" —Å Supabase
class MapSystem {
    constructor() {
        this.mapMobs = this.initializeMapMobs();
        this.adapter = window.mapSupabaseAdapter; // –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase –∞–¥–∞–ø—Ç–µ—Ä
        
        console.log('üó∫Ô∏è MapSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Supabase');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–æ–≤ –∫–∞—Ä—Ç—ã
     */
    initializeMapMobs() {
        return [
            {
                id: 'wolf',
                name: 'üê∫ –õ–µ—Å–Ω–æ–π –í–æ–ª–∫',
                level: 1,
                hp: 200,
                maxHp: 200,
                attack: 20,
                abilities: ['bite', 'howl'],
                unlocked: true, // –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
                description: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≤–æ–ª–∫ –∏–∑ —Ç–µ–º–Ω–æ–≥–æ –ª–µ—Å–∞. –•–æ—Ä–æ—à–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.',
                rewards: { crystals: [2, 4], gold: [20, 35], exp: [15, 25] }
            },
            {
                id: 'troll',
                name: 'üßå –ì–æ—Ä–Ω—ã–π –¢—Ä–æ–ª–ª—å', 
                level: 2,
                hp: 320,
                maxHp: 320,
                attack: 28,
                abilities: ['club_hit', 'earthquake', 'thick_skin'],
                unlocked: false,
                unlockedBy: 'wolf',
                description: '–ú–∞—Å—Å–∏–≤–Ω—ã–π —Ç—Ä–æ–ª–ª—å —Å –¥—É–±–∏–Ω–æ–π. –û—á–µ–Ω—å –∂–∏–≤—É—á–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫.',
                rewards: { crystals: [4, 7], gold: [35, 55], exp: [25, 40] }
            },
            {
                id: 'golem',
                name: '‚ùÑÔ∏è –õ–µ–¥—è–Ω–æ–π –ì–æ–ª–µ–º',
                level: 3, 
                hp: 480,
                maxHp: 480,
                attack: 35,
                abilities: ['ice_shard', 'ice_storm', 'regeneration'],
                unlocked: false,
                unlockedBy: 'troll',
                description: '–î—Ä–µ–≤–Ω–∏–π –≥–æ–ª–µ–º –∏–∑–æ –ª—å–¥–∞. –ú–æ–∂–µ—Ç –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –≤—Ä–∞–≥–æ–≤.',
                rewards: { crystals: [6, 10], gold: [50, 80], exp: [40, 60] }
            },
            {
                id: 'elemental',
                name: 'üî• –û–≥–Ω–µ–Ω–Ω—ã–π –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å',
                level: 4,
                hp: 650, 
                maxHp: 650,
                attack: 42,
                abilities: ['fireball', 'inferno', 'flame_rage'],
                unlocked: false,
                unlockedBy: 'golem',
                description: '–°—É—â–µ—Å—Ç–≤–æ –∏–∑ —á–∏—Å—Ç–æ–≥–æ –ø–ª–∞–º–µ–Ω–∏. –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ –ø—Ä–∏ —Ä–∞–Ω–µ–Ω–∏–∏.',
                rewards: { crystals: [8, 15], gold: [70, 120], exp: [60, 90] }
            },
            {
                id: 'dragon', 
                name: 'üêâ –î—Ä–µ–≤–Ω–∏–π –î—Ä–∞–∫–æ–Ω',
                level: 5,
                hp: 900,
                maxHp: 900, 
                attack: 55,
                abilities: ['claw_strike', 'fire_breath', 'sky_rage', 'last_breath'],
                unlocked: false,
                unlockedBy: 'elemental',
                isBoss: true,
                description: '–ë–û–°–°! –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –¥—Ä–∞–∫–æ–Ω —Å –º–æ—â–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –∏ —Ü–µ–Ω–Ω—ã–º –ª—É—Ç–æ–º.',
                rewards: { 
                    crystals: [15, 25], 
                    gold: [100, 200], 
                    exp: [100, 150],
                    itemChance: 60 // 60% —à–∞–Ω—Å –¥—Ä–æ–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
                }
            }
        ];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–∞ –º–æ–±–æ–≤
     */
    async getAvailableMobs(playerNickname) {
        try {
            const playerProgressData = await this.getPlayerProgress(playerNickname);
            const completedMobs = playerProgressData.completed_mobs || [];
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤
            const activeQueues = await this.adapter.getActiveQueues();
            
            return this.mapMobs.map(mob => {
                const isUnlocked = mob.unlocked || 
                    (mob.unlockedBy && completedMobs.includes(mob.unlockedBy));
                    
                const queueInfo = activeQueues[mob.id];
                const queueCount = queueInfo ? queueInfo.playerCount : 0;
                const inQueue = queueInfo ? queueInfo.players.includes(playerNickname) : false;
                    
                return {
                    ...mob,
                    isUnlocked,
                    inQueue,
                    queueCount
                };
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–±–æ–≤:', error);
            // Fallback –∫ –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
            return this.mapMobs.map(mob => ({
                ...mob,
                isUnlocked: mob.unlocked || false,
                inQueue: false,
                queueCount: 0
            }));
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞
     */
    async getPlayerProgress(playerNickname) {
        try {
            if (this.adapter && this.adapter.isConnected()) {
                return await this.adapter.getPlayerProgress(playerNickname);
            } else {
                // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—é
                const saved = localStorage.getItem(`map_progress_${playerNickname}`);
                if (saved) {
                    return JSON.parse(saved);
                }
                
                const defaultProgress = {
                    player_nickname: playerNickname,
                    completed_mobs: [],
                    crystals: 0
                };
                
                localStorage.setItem(`map_progress_${playerNickname}`, JSON.stringify(defaultProgress));
                return defaultProgress;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
            // Fallback
            return {
                player_nickname: playerNickname,
                completed_mobs: [],
                crystals: 0
            };
        }
    }
    
    /**
     * –ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–±–∞
     */
    async joinQueue(playerNickname, mobId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–±–∞
            const availableMobs = await this.getAvailableMobs(playerNickname);
            const mob = availableMobs.find(m => m.id === mobId);
            
            if (!mob || !mob.isUnlocked) {
                throw new Error('–ú–æ–± –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            }
            
            if (this.adapter && this.adapter.isConnected()) {
                return await this.adapter.joinQueue(playerNickname, mobId);
            } else {
                throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å:', error);
            throw error;
        }
    }
    
    /**
     * –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
     */
    async leaveQueue(playerNickname) {
        try {
            if (this.adapter && this.adapter.isConnected()) {
                return await this.adapter.leaveQueue(playerNickname);
            } else {
                throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏:', error);
            throw error;
        }
    }

    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP –∏–≥—Ä–æ–∫–∞
     */
    getPlayerMaxHp(playerNickname) {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –∏–≥—Ä–æ–∫–∞
        if (window.authSystem) {
            const users = window.authSystem.getUsers();
            const player = users.find(u => u.nickname === playerNickname);
            if (player && player.stats) {
                return 50 + (player.stats.end || 1) * 10; // –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ HP
            }
        }
        return 100; // Fallback
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerBattleStats(playerNickname) {
        if (window.authSystem) {
            const users = window.authSystem.getUsers();
            const player = users.find(u => u.nickname === playerNickname);
            if (player && player.stats) {
                return {
                    attack: 10 + (player.stats.str || 1) * 3,
                    defense: (player.stats.end || 1) * 2,
                    speed: player.stats.dex || 1,
                    luck: player.stats.lck || 1,
                    intelligence: player.stats.int || 1
                };
            }
        }
        return { attack: 25, defense: 10, speed: 3, luck: 3, intelligence: 1 }; // Fallback
    }

    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ (–¥–ª—è UI)
     */
    async getActiveQueues() {
        try {
            if (this.adapter && this.adapter.isConnected()) {
                return await this.adapter.getActiveQueues();
            } else {
                return {};
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π:', error);
            return {};
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏ –∏–≥—Ä–æ–∫–∞
     */
    async getPlayerActiveBattle(playerNickname) {
        try {
            if (this.adapter && this.adapter.isConnected()) {
                return await this.adapter.getPlayerActiveBattle(playerNickname);
            } else {
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è:', error);
            return null;
        }
    }
    
    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å –º–æ–±–∞ –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ
     */
    async markMobCompleted(playerNickname, mobId) {
        try {
            if (this.adapter && this.adapter.isConnected()) {
                await this.adapter.markMobCompleted(playerNickname, mobId);
                console.log(`‚úÖ ${playerNickname} –∑–∞–≤–µ—Ä—à–∏–ª –º–æ–±–∞: ${mobId}`);
            } else {
                // Fallback –∫ localStorage
                const progress = await this.getPlayerProgress(playerNickname);
                if (!progress.completed_mobs.includes(mobId)) {
                    progress.completed_mobs.push(mobId);
                    localStorage.setItem(`map_progress_${playerNickname}`, JSON.stringify(progress));
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–æ–±–∞:', error);
        }
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏–≥—Ä–æ–∫—É
     */
    async addCrystals(playerNickname, amount) {
        try {
            if (this.adapter && this.adapter.isConnected()) {
                await this.adapter.addCrystals(playerNickname, amount);
                console.log(`üíé ${playerNickname} –ø–æ–ª—É—á–∏–ª ${amount} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤`);
            } else {
                // Fallback –∫ localStorage
                const progress = await this.getPlayerProgress(playerNickname);
                progress.crystals = (progress.crystals || 0) + amount;
                localStorage.setItem(`map_progress_${playerNickname}`, JSON.stringify(progress));
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤:', error);
        }
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–≥—Ä–æ–∫—É
     */
    async addItem(playerNickname, item) {
        try {
            if (this.adapter && this.adapter.isConnected()) {
                await this.adapter.addItem(playerNickname, item);
                console.log(`üéÅ ${playerNickname} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥–º–µ—Ç: ${item.name}`);
            } else {
                console.log(`üéÅ ${playerNickname} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥–º–µ—Ç: ${item.name} (–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–∫–∞—Ü–∏–∏
     */
    async getLocationStats() {
        try {
            const activeQueues = await this.getActiveQueues();
            const queueCount = Object.keys(activeQueues).length;
            
            return {
                totalQueues: queueCount,
                activeBattles: 0, // TODO: –ø–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤
                totalProgressRecords: 0, // TODO: –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                mobsData: this.mapMobs.map(mob => ({
                    id: mob.id,
                    name: mob.name,
                    level: mob.level,
                    queueCount: activeQueues[mob.id]?.playerCount || 0
                }))
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {
                totalQueues: 0,
                activeBattles: 0,
                totalProgressRecords: 0,
                mobsData: this.mapMobs.map(mob => ({
                    id: mob.id,
                    name: mob.name,
                    level: mob.level,
                    queueCount: 0
                }))
            };
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
if (!window.mapSystem) {
    window.mapSystem = new MapSystem();
    console.log('üó∫Ô∏è –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ');
}
// js/map-location/map-ui.js - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–æ–∫–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
class MapLocationUI {
    constructor() {
        this.currentView = 'mob_list'; // mob_list, queue_waiting, battle_active
        this.selectedMob = null;
        this.battleData = null;
        this.updateInterval = null;
        
        console.log('üé® MapLocationUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–æ–∫–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
     */
    createMapLocationInterface() {
        const gameInterface = document.querySelector('.game-interface');
        if (!gameInterface) return;
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingMapInterface = document.getElementById('map-location-interface');
        if (existingMapInterface) {
            existingMapInterface.remove();
        }
        
        const mapInterface = document.createElement('div');
        mapInterface.id = 'map-location-interface';
        mapInterface.innerHTML = `
            <div class="map-location-container">
                <div class="map-header">
                    <h2>üó∫Ô∏è –õ–û–ö–ê–¶–ò–Ø: –ö–ê–†–¢–ê</h2>
                    <p>–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –±–æ–∏ –ø—Ä–æ—Ç–∏–≤ —É—Å–∏–ª–∏–≤–∞—é—â–∏—Ö—Å—è –º–æ–±–æ–≤</p>
                    <div class="player-resources">
                        <div class="resource-item">
                            <span class="resource-icon">üíé</span>
                            <span class="resource-label">–ö—Ä–∏—Å—Ç–∞–ª–ª—ã:</span>
                            <span class="resource-value" id="player-crystals">0</span>
                        </div>
                    </div>
                </div>
                
                <!-- –°–ø–∏—Å–æ–∫ –º–æ–±–æ–≤ -->
                <div id="mob-list-view" class="map-view active">
                    <div class="mobs-grid" id="mobs-grid">
                        <!-- –ú–æ–±—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
                
                <!-- –û–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ -->
                <div id="queue-waiting-view" class="map-view">
                    <div class="queue-container">
                        <div class="queue-header">
                            <h3 id="queue-mob-name">üê∫ –õ–µ—Å–Ω–æ–π –í–æ–ª–∫</h3>
                            <div class="queue-status" id="queue-status">–ò—â–µ–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞...</div>
                        </div>
                        
                        <div class="queue-players">
                            <div class="queue-player filled">
                                <div class="player-avatar">üë§</div>
                                <div class="player-name" id="queue-player1">–í—ã</div>
                            </div>
                            <div class="queue-vs">VS</div>
                            <div class="queue-player" id="queue-player2-slot">
                                <div class="player-avatar">‚ùì</div>
                                <div class="player-name">–ò—â–µ–º...</div>
                            </div>
                        </div>
                        
                        <div class="queue-timer" id="queue-timer" style="display: none;">
                            <div class="timer-circle">
                                <span class="timer-text" id="timer-text">60</span>
                            </div>
                            <div class="timer-label">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±–æ—é</div>
                        </div>
                        
                        <div class="queue-actions">
                            <button class="map-btn secondary" id="leave-queue-btn">–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å</button>
                        </div>
                    </div>
                </div>
                
                <!-- –ê–∫—Ç–∏–≤–Ω—ã–π –±–æ–π -->
                <div id="battle-active-view" class="map-view">
                    <div class="battle-container">
                        <div class="battle-header">
                            <h3 id="battle-mob-name">üê∫ –õ–µ—Å–Ω–æ–π –í–æ–ª–∫</h3>
                            <div class="battle-turn">–•–æ–¥: <span id="battle-turn-number">1</span></div>
                        </div>
                        
                        <!-- –°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ -->
                        <div class="battle-participants">
                            <div class="participants-row">
                                <div class="participant player" id="battle-player1">
                                    <div class="participant-name">–ò–≥—Ä–æ–∫ 1</div>
                                    <div class="participant-hp">
                                        <div class="hp-bar">
                                            <div class="hp-fill" style="width: 100%"></div>
                                        </div>
                                        <div class="hp-text">100/100</div>
                                    </div>
                                    <div class="participant-action" id="player1-action">–í—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ...</div>
                                </div>
                                
                                <div class="participant player" id="battle-player2">
                                    <div class="participant-name">–ò–≥—Ä–æ–∫ 2</div>
                                    <div class="participant-hp">
                                        <div class="hp-bar">
                                            <div class="hp-fill" style="width: 100%"></div>
                                        </div>
                                        <div class="hp-text">100/100</div>
                                    </div>
                                    <div class="participant-action" id="player2-action">–í—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ...</div>
                                </div>
                            </div>
                            
                            <div class="vs-divider">VS</div>
                            
                            <div class="participant mob" id="battle-mob">
                                <div class="participant-name">–ú–æ–±</div>
                                <div class="participant-hp">
                                    <div class="hp-bar mob-hp">
                                        <div class="hp-fill" style="width: 100%"></div>
                                    </div>
                                    <div class="hp-text">200/200</div>
                                </div>
                                <div class="participant-effects" id="mob-effects"></div>
                            </div>
                        </div>
                        
                        <!-- –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ -->
                        <div class="battle-actions" id="battle-actions">
                            <h4>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</h4>
                            <div class="actions-grid">
                                <button class="action-btn available" data-action="attack">
                                    <div class="action-icon">‚öîÔ∏è</div>
                                    <div class="action-name">–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞</div>
                                    <div class="action-desc">–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞</div>
                                </button>
                                <button class="action-btn" data-action="power_strike" id="power-strike-btn">
                                    <div class="action-icon">üí•</div>
                                    <div class="action-name">–ú–æ—â–Ω—ã–π —É–¥–∞—Ä</div>
                                    <div class="action-desc">x1.8 —É—Ä–æ–Ω–∞</div>
                                    <div class="action-cooldown" id="power-strike-cd"></div>
                                </button>
                                <button class="action-btn available" data-action="defend">
                                    <div class="action-icon">üõ°Ô∏è</div>
                                    <div class="action-name">–ó–∞—â–∏—Ç–∞</div>
                                    <div class="action-desc">-60% —É—Ä–æ–Ω–∞</div>
                                </button>
                                <button class="action-btn" data-action="heal" id="heal-btn">
                                    <div class="action-icon">üíö</div>
                                    <div class="action-name">–ò—Å—Ü–µ–ª–µ–Ω–∏–µ</div>
                                    <div class="action-desc">+35% HP</div>
                                    <div class="action-uses" id="heal-uses">2/2</div>
                                </button>
                            </div>
                        </div>
                        
                        <!-- –õ–æ–≥ –±–æ—è -->
                        <div class="battle-log">
                            <h4>üìú –•–æ–¥ –±–æ—è:</h4>
                            <div class="log-entries" id="battle-log-entries"></div>
                        </div>
                    </div>
                </div>
                
                <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è -->
                <div id="battle-result-view" class="map-view">
                    <div class="result-container">
                        <div class="result-header">
                            <h2 id="result-title">üèÜ –ü–û–ë–ï–î–ê!</h2>
                            <p id="result-message">–ú–æ–± –ø–æ–≤–µ—Ä–∂–µ–Ω!</p>
                        </div>
                        
                        <div class="result-rewards" id="result-rewards">
                            <!-- –ù–∞–≥—Ä–∞–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                        
                        <div class="result-actions">
                            <button class="map-btn primary" id="return-to-map-btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–µ</button>
                        </div>
                    </div>
                </div>
                
                <!-- –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ -->
                <div class="map-controls">
                    <button class="map-btn secondary" id="map-back-btn">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É</button>
                </div>
            </div>
        `;
        
        gameInterface.appendChild(mapInterface);
        this.setupEventListeners();
        this.updateMobsList();
        this.startPeriodicUpdates();
        
        console.log('üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–æ–∫–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –í–æ–∑–≤—Ä–∞—Ç –≤ –∏–≥—Ä—É
        document.getElementById('map-back-btn').addEventListener('click', () => {
            this.hideMapLocation();
        });
        
        // –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
        document.getElementById('leave-queue-btn').addEventListener('click', () => {
            this.leaveQueue();
        });
        
        // –î–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—é
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const action = e.currentTarget.dataset.action;
                if (e.currentTarget.classList.contains('available')) {
                    this.selectBattleAction(action);
                }
            });
        });
        
        // –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        document.getElementById('return-to-map-btn').addEventListener('click', () => {
            this.showView('mob_list');
            this.updateMobsList();
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–±–æ–≤
     */
    updateMobsList() {
        const currentPlayer = window.authSystem.getCurrentUser();
        if (!currentPlayer) return;
        
        const mobsGrid = document.getElementById('mobs-grid');
        if (!mobsGrid) return;
        
        const availableMobs = window.mapSystem.getAvailableMobs(currentPlayer.nickname);
        const playerProgress = window.mapSystem.getPlayerProgress(currentPlayer.nickname);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
        document.getElementById('player-crystals').textContent = playerProgress.crystals || 0;
        
        mobsGrid.innerHTML = '';
        
        availableMobs.forEach(mob => {
            const mobCard = document.createElement('div');
            mobCard.className = `mob-card ${mob.isUnlocked ? 'unlocked' : 'locked'}`;
            
            const isCompleted = playerProgress.completedMobs.includes(mob.id);
            const queueInfo = mob.queueCount > 0 ? `–í –æ—á–µ—Ä–µ–¥–∏: ${mob.queueCount}/2` : '–°–≤–æ–±–æ–¥–Ω–æ';
            
            mobCard.innerHTML = `
                <div class="mob-header">
                    <div class="mob-icon">${mob.name.split(' ')[0]}</div>
                    <div class="mob-info">
                        <div class="mob-name">${mob.name}</div>
                        <div class="mob-level">–£—Ä–æ–≤–µ–Ω—å ${mob.level}</div>
                    </div>
                    ${isCompleted ? '<div class="mob-completed">‚úÖ</div>' : ''}
                </div>
                
                <div class="mob-stats">
                    <div class="stat-item">
                        <span class="stat-icon">‚ù§Ô∏è</span>
                        <span class="stat-value">${mob.hp}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-icon">‚öîÔ∏è</span>
                        <span class="stat-value">${mob.attack}</span>
                    </div>
                </div>
                
                <div class="mob-description">${mob.description}</div>
                
                <div class="mob-rewards">
                    <div class="reward-item">
                        <span class="reward-icon">üíé</span>
                        <span class="reward-text">${mob.rewards.crystals[0]}-${mob.rewards.crystals[1]}</span>
                    </div>
                    <div class="reward-item">
                        <span class="reward-icon">üí∞</span>
                        <span class="reward-text">${mob.rewards.gold[0]}-${mob.rewards.gold[1]}</span>
                    </div>
                    ${mob.isBoss ? '<div class="reward-item boss-loot"><span class="reward-icon">üéÅ</span><span class="reward-text">–ü—Ä–µ–¥–º–µ—Ç—ã</span></div>' : ''}
                </div>
                
                <div class="mob-queue-info">${queueInfo}</div>
                
                <div class="mob-actions">
                    ${mob.isUnlocked ? 
                        `<button class="mob-btn ${mob.inQueue ? 'in-queue' : 'join-queue'}" 
                                data-mob-id="${mob.id}" 
                                ${mob.inQueue ? 'disabled' : ''}>
                            ${mob.inQueue ? '–í –æ—á–µ—Ä–µ–¥–∏' : '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è (2 –∏–≥—Ä–æ–∫–∞)'}
                        </button>` :
                        `<button class="mob-btn locked" disabled>
                            –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–ø—Ä–æ–π–¥–∏—Ç–µ ${mob.unlockedBy})
                        </button>`
                    }
                </div>
            `;
            
            mobsGrid.appendChild(mobCard);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–ø–∏—Å–∏
        document.querySelectorAll('.mob-btn.join-queue').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const mobId = e.target.dataset.mobId;
                this.joinMobQueue(mobId);
            });
        });
    }
    
    /**
     * –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–±–∞
     */
    async joinMobQueue(mobId) {
        const currentPlayer = window.authSystem.getCurrentUser();
        if (!currentPlayer) {
            alert('–û—à–∏–±–∫–∞: –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        try {
            const result = window.mapSystem.joinQueue(currentPlayer.nickname, mobId);
            
            if (result.success) {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–±–∞
                const availableMobs = window.mapSystem.getAvailableMobs(currentPlayer.nickname);
                this.selectedMob = availableMobs.find(m => m.id === mobId);
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∏–¥—É –æ—á–µ—Ä–µ–¥–∏
                this.showQueueView();
                this.updateQueueView();
                
                console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ ${this.selectedMob.name}`);
            }
        } catch (error) {
            alert(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å: ${error.message}`);
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å:', error);
        }
    }
    
    /**
     * –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
     */
    leaveQueue() {
        const currentPlayer = window.authSystem.getCurrentUser();
        if (!currentPlayer) return;
        
        try {
            const result = window.mapSystem.leaveQueue(currentPlayer.nickname);
            
            if (result.success) {
                this.showView('mob_list');
                this.updateMobsList();
                console.log('‚úÖ –ü–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏:', error);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥ –æ—á–µ—Ä–µ–¥–∏
     */
    showQueueView() {
        this.showView('queue_waiting');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–±–µ
        document.getElementById('queue-mob-name').textContent = this.selectedMob.name;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
        const queueData = window.mapSystem.getActiveQueues()[this.selectedMob.id];
        
        if (queueData) {
            this.updateQueueStatus(queueData);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
     */
    updateQueueStatus(queueData) {
        const statusEl = document.getElementById('queue-status');
        const player2Slot = document.getElementById('queue-player2-slot');
        const timerEl = document.getElementById('queue-timer');
        
        if (queueData.playerCount === 1) {
            statusEl.textContent = '–ò—â–µ–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞...';
            player2Slot.innerHTML = `
                <div class="player-avatar">‚ùì</div>
                <div class="player-name">–ò—â–µ–º...</div>
            `;
            timerEl.style.display = 'none';
        } else if (queueData.playerCount === 2) {
            statusEl.textContent = '–ù–∞–ø–∞—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...';
            const otherPlayer = queueData.players.find(p => p !== window.authSystem.getCurrentUser().nickname);
            player2Slot.innerHTML = `
                <div class="player-avatar">üë§</div>
                <div class="player-name">${otherPlayer}</div>
            `;
            
            if (queueData.hasTimer) {
                timerEl.style.display = 'block';
                this.startCountdown();
            }
        }
    }
    
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
     */
    startCountdown() {
        let timeLeft = 60;
        const timerText = document.getElementById('timer-text');
        
        const countdown = setInterval(() => {
            timerText.textContent = timeLeft;
            timeLeft--;
            
            if (timeLeft < 0) {
                clearInterval(countdown);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª—Å—è –ª–∏ –±–æ–π
                this.checkForActiveBattle();
            }
        }, 1000);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π
     */
    checkForActiveBattle() {
        const currentPlayer = window.authSystem.getCurrentUser();
        if (!currentPlayer) return;
        
        const activeBattle = window.mapSystem.getPlayerActiveBattle(currentPlayer.nickname);
        
        if (activeBattle) {
            this.battleData = activeBattle;
            this.showBattleView();
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥ –±–æ—è
     */
    showBattleView() {
        this.showView('battle_active');
        this.updateBattleView();
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥ –±–æ—è
     */
    updateBattleView() {
        if (!this.battleData) return;
        
        const currentPlayer = window.authSystem.getCurrentUser();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        document.getElementById('battle-mob-name').textContent = this.battleData.mobData.name;
        document.getElementById('battle-turn-number').textContent = this.battleData.currentTurn;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        this.updateBattleParticipants();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
        this.updateBattleActions(currentPlayer.nickname);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
        this.updateBattleLog();
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ—è
     */
    updateBattleParticipants() {
        const players = this.battleData.players;
        const mob = this.battleData.mobData;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        players.forEach((player, index) => {
            const playerEl = document.getElementById(`battle-player${index + 1}`);
            if (playerEl) {
                playerEl.querySelector('.participant-name').textContent = player.nickname;
                
                const hpFill = playerEl.querySelector('.hp-fill');
                const hpText = playerEl.querySelector('.hp-text');
                const hpPercent = (player.currentHp / player.maxHp) * 100;
                
                hpFill.style.width = `${hpPercent}%`;
                hpText.textContent = `${player.currentHp}/${player.maxHp}`;
                
                // –°—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—è
                const actionEl = playerEl.querySelector('.participant-action');
                const hasAction = this.battleData.playerActions[player.nickname];
                actionEl.textContent = hasAction ? 
                    `–í—ã–±—Ä–∞–ª: ${hasAction.action.name}` : 
                    '–í—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ...';
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∞
        const mobEl = document.getElementById('battle-mob');
        if (mobEl) {
            mobEl.querySelector('.participant-name').textContent = mob.name;
            
            const hpFill = mobEl.querySelector('.hp-fill');
            const hpText = mobEl.querySelector('.hp-text');
            const hpPercent = (mob.currentHp / mob.maxHp) * 100;
            
            hpFill.style.width = `${hpPercent}%`;
            hpText.textContent = `${mob.currentHp}/${mob.maxHp}`;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
     */
    updateBattleActions(playerNickname) {
        const player = this.battleData.players.find(p => p.nickname === playerNickname);
        if (!player) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ—â–Ω–æ–≥–æ —É–¥–∞—Ä–∞
        const powerStrikeBtn = document.getElementById('power-strike-btn');
        const powerStrikeCd = document.getElementById('power-strike-cd');
        
        if (player.actions.powerStrikeCooldown > 0) {
            powerStrikeBtn.classList.remove('available');
            powerStrikeCd.textContent = `${player.actions.powerStrikeCooldown} —Ö–æ–¥–æ–≤`;
        } else {
            powerStrikeBtn.classList.add('available');
            powerStrikeCd.textContent = '';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è
        const healBtn = document.getElementById('heal-btn');
        const healUses = document.getElementById('heal-uses');
        const remainingHeals = 2 - player.actions.healsUsed;
        
        if (remainingHeals > 0) {
            healBtn.classList.add('available');
        } else {
            healBtn.classList.remove('available');
        }
        healUses.textContent = `${remainingHeals}/2`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏–µ
        const hasAction = this.battleData.playerActions[playerNickname];
        if (hasAction) {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ
            document.querySelectorAll('.action-btn').forEach(btn => {
                btn.classList.remove('available');
                btn.classList.add('selected');
            });
        }
    }
    
    /**
     * –í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–æ—é
     */
    selectBattleAction(actionType) {
        const currentPlayer = window.authSystem.getCurrentUser();
        if (!currentPlayer || !this.battleData) return;
        
        try {
            const result = window.mapBattleSystem.processPlayerAction(
                this.battleData, 
                currentPlayer.nickname, 
                actionType
            );
            
            if (result.success) {
                console.log(`‚öîÔ∏è –í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ${actionType}`);
                this.updateBattleActions(currentPlayer.nickname);
                
                // –ï—Å–ª–∏ –±–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (this.battleData.status === 'finished') {
                    setTimeout(() => {
                        this.showBattleResult();
                    }, 2000);
                }
            }
        } catch (error) {
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥ –±–æ—è
     */
    updateBattleLog() {
        const logEntries = document.getElementById('battle-log-entries');
        if (!logEntries || !this.battleData) return;
        
        logEntries.innerHTML = '';
        
        this.battleData.battleLog.forEach(entry => {
            const logEl = document.createElement('div');
            logEl.className = `log-entry ${entry.type}`;
            logEl.innerHTML = `
                <span class="log-turn">–•–æ–¥ ${entry.turn}:</span>
                <span class="log-message">${entry.message}</span>
            `;
            logEntries.appendChild(logEl);
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        logEntries.scrollTop = logEntries.scrollHeight;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
     */
    showBattleResult() {
        if (!this.battleData || !this.battleData.result) return;
        
        this.showView('battle_result');
        
        const result = this.battleData.result;
        const titleEl = document.getElementById('result-title');
        const messageEl = document.getElementById('result-message');
        const rewardsEl = document.getElementById('result-rewards');
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (result.result === 'victory') {
            titleEl.textContent = 'üèÜ –ü–û–ë–ï–î–ê!';
            titleEl.className = 'result-title victory';
        } else {
            titleEl.textContent = 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï';
            titleEl.className = 'result-title defeat';
        }
        
        messageEl.textContent = result.message;
        
        // –ù–∞–≥—Ä–∞–¥—ã (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–±–µ–¥–µ)
        rewardsEl.innerHTML = '';
        if (result.result === 'victory') {
            const currentPlayer = window.authSystem.getCurrentUser();
            const progress = window.mapSystem.getPlayerProgress(currentPlayer.nickname);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
            const rewards = this.battleData.mobData.rewards;
            
            rewardsEl.innerHTML = `
                <h3>üéÅ –ù–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã:</h3>
                <div class="rewards-list">
                    <div class="reward-item">
                        <span class="reward-icon">üíé</span>
                        <span class="reward-text">–ö—Ä–∏—Å—Ç–∞–ª–ª—ã: ${rewards.crystals[0]}-${rewards.crystals[1]}</span>
                    </div>
                    <div class="reward-item">
                        <span class="reward-icon">üí∞</span>
                        <span class="reward-text">–ó–æ–ª–æ—Ç–æ: ${rewards.gold[0]}-${rewards.gold[1]}</span>
                    </div>
                    <div class="reward-item">
                        <span class="reward-icon">‚≠ê</span>
                        <span class="reward-text">–û–ø—ã—Ç: ${rewards.exp[0]}-${rewards.exp[1]}</span>
                    </div>
                    ${this.battleData.mobData.isBoss ? 
                        '<div class="reward-item boss-reward"><span class="reward-icon">üéÅ</span><span class="reward-text">–®–∞–Ω—Å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç: 60%</span></div>' : 
                        ''
                    }
                </div>
            `;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤–∏–¥
     */
    showView(viewName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥—ã
        document.querySelectorAll('.map-view').forEach(view => {
            view.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –≤–∏–¥
        const targetView = document.getElementById(`${viewName.replace('_', '-')}-view`);
        if (targetView) {
            targetView.classList.add('active');
        }
        
        this.currentView = viewName;
    }
    
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startPeriodicUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
        
        this.updateInterval = setInterval(() => {
            if (this.currentView === 'mob_list') {
                this.updateMobsList();
            } else if (this.currentView === 'queue_waiting') {
                this.updateQueueView();
            } else if (this.currentView === 'battle_active') {
                this.checkForBattleUpdates();
            }
        }, 2000);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥ –æ—á–µ—Ä–µ–¥–∏
     */
    updateQueueView() {
        if (!this.selectedMob) return;
        
        const queueData = window.mapSystem.getActiveQueues()[this.selectedMob.id];
        
        if (queueData) {
            this.updateQueueStatus(queueData);
        } else {
            // –û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            this.showView('mob_list');
            this.updateMobsList();
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—è
     */
    checkForBattleUpdates() {
        const currentPlayer = window.authSystem.getCurrentUser();
        if (!currentPlayer) return;
        
        const activeBattle = window.mapSystem.getPlayerActiveBattle(currentPlayer.nickname);
        
        if (activeBattle && activeBattle.id === this.battleData?.id) {
            this.battleData = activeBattle;
            this.updateBattleView();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è
            if (activeBattle.status === 'finished') {
                this.showBattleResult();
            }
        } else if (!activeBattle && this.currentView === 'battle_active') {
            // –ë–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–µ
            this.showView('mob_list');
            this.updateMobsList();
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ä—Ç—ã
     */
    hideMapLocation() {
        const mapInterface = document.getElementById('map-location-interface');
        if (mapInterface) {
            mapInterface.remove();
        }
        
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∏–≥—Ä—É
        window.gameApp.showScreen('game-screen');
        
        console.log('üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ä—Ç—ã —Å–∫—Ä—ã—Ç');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
if (!window.mapLocationUI) {
    window.mapLocationUI = new MapLocationUI();
    console.log('üé® UI –ª–æ–∫–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}
// js/online-client-fixed.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Vercel API
class OnlineGameClient {
    constructor() {
        // –î–ª—è Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        this.apiBase = window.location.hostname === 'localhost' 
            ? 'http://localhost:3000/api' 
            : '/api';
        
        this.playerId = null;
        this.worldState = {
            players: [],
            mobs: [],
            lastUpdate: 0
        };
        this.updateInterval = null;
        this.chatMessages = [];
        this.isConnected = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
    async initialize() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞...');
        console.log('API Base:', this.apiBase);
        
        try {
            const currentUser = window.authSystem.getCurrentUser();
            if (!currentUser) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                return false;
            }

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', currentUser);

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∏–≥—Ä–µ
            const response = await this.makeApiCall('/players', 'POST', {
                action: 'join',
                playerData: {
                    nickname: currentUser.nickname,
                    faction: currentUser.faction,
                    level: currentUser.level || 1,
                    stats: currentUser.stats || {}
                }
            });

            console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);

            if (response.success) {
                this.playerId = response.playerId;
                this.worldState = response.worldState;
                this.isConnected = true;
                
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É!', this.playerId);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                this.startUpdates();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.renderOnlineInterface();
                
                return true;
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
            this.showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ò–≥—Ä–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.', 'error');
            return false;
        }
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    async makeApiCall(endpoint, method = 'GET', data = null) {
        const url = this.apiBase + endpoint;
        console.log(`üåê API –≤—ã–∑–æ–≤: ${method} ${url}`, data);
        
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            // –í–∞–∂–Ω–æ –¥–ª—è CORS
            mode: 'cors',
            credentials: 'same-origin'
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        try {
            const response = await fetch(url, options);
            
            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }
            
            const result = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', result);
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
            throw error;
        }
    }

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    startUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }

        this.updateInterval = setInterval(async () => {
            try {
                await this.updateWorldState();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                // –ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è —Å—Ä–∞–∑—É, –¥–∞–µ–º —à–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            }
        }, 5000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª)
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞
    async updateWorldState() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞...');
        
        try {
            const response = await this.makeApiCall('/players', 'GET');
            
            if (response.players) {
                this.worldState.players = response.players;
                this.worldState.mobs = response.mobs || [];
                this.worldState.lastUpdate = response.timestamp;
                
                console.log(`‚úÖ –ú–∏—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ${response.players.length} –∏–≥—Ä–æ–∫–æ–≤, ${response.mobs.length} –º–æ–±–æ–≤`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.renderWorldMap();
                this.updateOnlineCount();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∏—Ä–∞:', error);
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞
    renderWorldMap() {
        const mapContainer = document.getElementById('online-world-map');
        if (!mapContainer) {
            console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const mapSize = 15;
        mapContainer.innerHTML = '';
        mapContainer.style.display = 'grid';
        mapContainer.style.gridTemplateColumns = `repeat(${mapSize}, 30px)`;
        mapContainer.style.gap = '1px';
        mapContainer.style.justifyContent = 'center';

        const currentUser = window.authSystem.getCurrentUser();
        const currentPlayer = this.worldState.players.find(p => p.id === this.playerId);

        for (let y = 0; y < mapSize; y++) {
            for (let x = 0; x < mapSize; x++) {
                const cell = document.createElement('div');
                cell.className = 'world-cell';
                cell.style.cssText = `
                    width: 30px;
                    height: 30px;
                    border: 1px solid #444;
                    background: #2b2d42;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 16px;
                    position: relative;
                    cursor: pointer;
                    transition: all 0.2s ease;
                `;

                // –ò–≥—Ä–æ–∫–∏ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                const playersHere = this.worldState.players.filter(p => p.x === x && p.y === y);
                // –ú–æ–±—ã –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                const mobsHere = this.worldState.mobs.filter(m => m.x === x && m.y === y && m.hp > 0);

                if (playersHere.length > 0) {
                    const isCurrentPlayer = currentPlayer && currentPlayer.x === x && currentPlayer.y === y;
                    
                    if (isCurrentPlayer) {
                        cell.textContent = 'üî∏';
                        cell.style.backgroundColor = '#5e60ce';
                    } else {
                        cell.textContent = 'üë§';
                        cell.style.backgroundColor = '#8d99ae';
                    }
                    
                    cell.title = playersHere.map(p => `${p.nickname} (${p.faction === 'workers' ? '–†–∞–±–æ—Ç—è–≥–∞' : '–ö—Ä–µ–∞–∫–ª'}, —É—Ä.${p.level || 1})`).join('\n');
                } else if (mobsHere.length > 0) {
                    cell.textContent = 'üëπ';
                    cell.style.backgroundColor = '#e74c3c';
                    cell.title = mobsHere.map(m => `${m.name} (${m.hp}/${m.maxHp} HP)`).join('\n');
                    
                    // –ö–ª–∏–∫ –ø–æ –º–æ–±—É –¥–ª—è –∞—Ç–∞–∫–∏
                    cell.onclick = () => {
                        if (currentPlayer && Math.abs(currentPlayer.x - x) + Math.abs(currentPlayer.y - y) <= 1) {
                            this.attackMob(mobsHere[0].id);
                        } else {
                            this.showMessage('–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –º–æ–±–∞!', 'warning');
                        }
                    };
                }

                cell.onmouseover = () => {
                    cell.style.boxShadow = '0 0 5px rgba(94, 96, 206, 0.5)';
                };
                
                cell.onmouseout = () => {
                    cell.style.boxShadow = 'none';
                };

                mapContainer.appendChild(cell);
            }
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showMessage(text, type = 'info') {
        console.log(`[${type.toUpperCase()}] ${text}`);
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'error' ? '#e74c3c' : type === 'warning' ? '#f39c12' : '#3498db'};
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            z-index: 10000;
            animation: slideIn 0.3s ease;
            max-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        `;
        notification.textContent = text;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    stopUpdates() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
        this.isConnected = false;
    }

    // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    async movePlayer(direction) {
        if (!this.isConnected) {
            this.showMessage('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
            return;
        }

        console.log(`üö∂ –î–≤–∏–∂–µ–Ω–∏–µ: ${direction}`);

        try {
            const response = await this.makeApiCall('/players', 'POST', {
                action: 'move',
                playerData: {
                    id: this.playerId,
                    direction: direction
                }
            });

            if (response.success) {
                console.log('‚úÖ –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å:', response.newPosition);
                
                // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await this.updateWorldState();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å –º–æ–±–∞–º–∏
                if (response.mobsEncountered && response.mobsEncountered.length > 0) {
                    this.handleMobEncounter(response.mobsEncountered);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è:', error);
            this.showMessage('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è', 'error');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—Ä–µ—á–∏ —Å –º–æ–±–æ–º
    handleMobEncounter(mobs) {
        const mob = mobs[0];
        this.showMessage(`–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ ${mob.name}! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–±–∞ –¥–ª—è –∞—Ç–∞–∫–∏.`, 'warning');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–Ω–ª–∞–π–Ω
    updateOnlineCount() {
        const countElement = document.getElementById('online-count');
        if (countElement) {
            countElement.textContent = this.worldState.players.length;
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–Ω–ª–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    renderOnlineInterface() {
        console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
        
        const gameInterface = document.querySelector('.game-interface');
        if (!gameInterface) {
            console.error('‚ùå –ò–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–Ω–ª–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        let onlineSection = document.getElementById('online-section');
        if (!onlineSection) {
            onlineSection = document.createElement('div');
            onlineSection.id = 'online-section';
            onlineSection.innerHTML = `
                <div style="margin-top: 20px; background: #3a3f5b; border-radius: 8px; padding: 15px; border: 1px solid #8d99ae;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                        <h3 style="color: #edf2f4; margin: 0;">üåê –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º</h3>
                        <div style="color: #5e60ce; font-weight: bold;">
                            –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: <span id="online-count">0</span>
                        </div>
                    </div>
                    
                    <!-- –ö–∞—Ä—Ç–∞ –º–∏—Ä–∞ -->
                    <div style="margin-bottom: 15px;">
                        <h4 style="color: #edf2f4; margin-bottom: 10px; text-align: center;">üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–∏—Ä–∞ (15x15)</h4>
                        <div id="online-world-map"></div>
                    </div>
                    
                    <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -->
                    <div style="text-align: center; margin-bottom: 15px;">
                        <div style="margin-bottom: 10px;">
                            <button onclick="window.onlineClient.movePlayer('up')" 
                                    style="padding: 8px 15px; background: #5e60ce; color: white; border: none; border-radius: 5px; cursor: pointer; margin: 0 5px;">‚Üë</button>
                        </div>
                        <div>
                            <button onclick="window.onlineClient.movePlayer('left')" 
                                    style="padding: 8px 15px; background: #5e60ce; color: white; border: none; border-radius: 5px; cursor: pointer; margin: 0 5px;">‚Üê</button>
                            <button onclick="window.onlineClient.movePlayer('down')" 
                                    style="padding: 8px 15px; background: #5e60ce; color: white; border: none; border-radius: 5px; cursor: pointer; margin: 0 5px;">‚Üì</button>
                            <button onclick="window.onlineClient.movePlayer('right')" 
                                    style="padding: 8px 15px; background: #5e60ce; color: white; border: none; border-radius: 5px; cursor: pointer; margin: 0 5px;">‚Üí</button>
                        </div>
                    </div>
                    
                    <!-- –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è -->
                    <div style="text-align: center; padding: 10px; background: #2b2d42; border-radius: 5px;">
                        <span style="color: #28a745; font-weight: bold;">‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É</span>
                    </div>
                </div>
            `;
            gameInterface.appendChild(onlineSection);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
        if (!document.getElementById('online-animations')) {
            const style = document.createElement('style');
            style.id = 'online-animations';
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }

        this.renderWorldMap();
        console.log('‚úÖ –û–Ω–ª–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–Ω–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç–∞
if (window.onlineClient) {
    window.onlineClient.stopUpdates();
}
window.onlineClient = new OnlineGameClient();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∏–≥—Ä—É
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...');
    
    if (window.gameApp) {
        const originalShowScreen = window.gameApp.showScreen;
        window.gameApp.showScreen = function(screenId) {
            originalShowScreen.call(this, screenId);
            
            if (screenId === 'game-screen') {
                console.log('üéÆ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º...');
                
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä—É
                setTimeout(async () => {
                    const success = await window.onlineClient.initialize();
                    if (success) {
                        console.log('üåê –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
                    } else {
                        console.log('üíæ –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
                    }
                }, 1000);
            } else {
                // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã
                window.onlineClient.stopUpdates();
            }
        };
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugOnline = () => {
    console.log('=== –û–ù–õ–ê–ô–ù –û–¢–õ–ê–î–ö–ê ===');
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω:', window.onlineClient.isConnected);
    console.log('Player ID:', window.onlineClient.playerId);
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞:', window.onlineClient.worldState);
    console.log('API Base:', window.onlineClient.apiBase);
};

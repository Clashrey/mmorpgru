// js/supabase-client.js - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
class SupabaseGameClient {
    constructor() {
        // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –ø—Ä–æ–µ–∫—Ç–∞
        this.supabaseUrl = 'YOUR_SUPABASE_URL'; // –Ω–∞–ø—Ä–∏–º–µ—Ä: https://xxxxx.supabase.co
        this.supabaseKey = 'YOUR_SUPABASE_ANON_KEY'; // Public anon key
        this.supabase = null;
        this.currentSession = null;
        this.realtimeChannel = null;
        
        this.worldState = {
            players: [],
            mobs: [],
            chatMessages: []
        };
        
        this.isConnected = false;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    async initialize() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Supabase SDK
            if (typeof window.supabase === 'undefined') {
                console.error('Supabase SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –≤ HTML: <script src="https://unpkg.com/@supabase/supabase-js@2"></script>');
                return false;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
            this.supabase = window.supabase.createClient(this.supabaseUrl, this.supabaseKey);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            const { data, error } = await this.supabase.from('players').select('count').limit(1);
            if (error) {
                throw error;
            }
            
            console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            this.isConnected = true;
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º realtime –ø–æ–¥–ø–∏—Å–∫–∏
            this.setupRealtimeSubscriptions();
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
            console.log('üîÑ –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
            return false;
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ realtime –ø–æ–¥–ø–∏—Å–æ–∫
    setupRealtimeSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        this.realtimeChannel = this.supabase
            .channel('game-updates')
            .on('postgres_changes', {
                event: '*',
                schema: 'public',
                table: 'players'
            }, (payload) => {
                this.handlePlayerUpdate(payload);
            })
            .on('postgres_changes', {
                event: 'INSERT',
                schema: 'public',
                table: 'chat_messages'
            }, (payload) => {
                this.handleChatMessage(payload.new);
            })
            .on('postgres_changes', {
                event: '*',
                schema: 'public',
                table: 'world_mobs'
            }, (payload) => {
                this.handleMobUpdate(payload);
            })
            .subscribe();
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    async registerPlayer(playerData, password) {
        try {
            // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (–ø—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
            const passwordHash = this.hashPassword(password);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ—Ä–∞–∫—Ü–∏–∏
            const stats = this.getFactionStats(playerData.faction);
            
            const { data, error } = await this.supabase
                .from('players')
                .insert([{
                    nickname: playerData.nickname,
                    password_hash: passwordHash,
                    faction: playerData.faction,
                    gender: playerData.gender,
                    ...stats
                }])
                .select()
                .single();
                
            if (error) {
                if (error.code === '23505') { // unique constraint violation
                    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                }
                throw error;
            }
            
            console.log('‚úÖ –ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', data);
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
    async loginPlayer(nickname, password) {
        try {
            const passwordHash = this.hashPassword(password);
            
            const { data, error } = await this.supabase
                .from('players')
                .select('*')
                .eq('nickname', nickname)
                .eq('password_hash', passwordHash)
                .single();
                
            if (error || !data) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –∏ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞
            await this.supabase
                .from('players')
                .update({
                    is_online: true,
                    last_login: new Date().toISOString(),
                    last_activity: new Date().toISOString()
                })
                .eq('id', data.id);
            
            this.currentSession = data;
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', data.nickname);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞
            await this.loadWorldState();
            
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞
    async loadWorldState() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
            const { data: players, error: playersError } = await this.supabase
                .from('player_full_info')
                .select('*')
                .eq('is_online', true)
                .gte('last_activity', new Date(Date.now() - 5 * 60 * 1000).toISOString()); // –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                
            if (playersError) throw playersError;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–±–æ–≤
            const { data: mobs, error: mobsError } = await this.supabase
                .from('active_world_mobs')
                .select('*');
                
            if (mobsError) throw mobsError;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            const { data: chatMessages, error: chatError } = await this.supabase
                .from('chat_messages')
                .select(`
                    *,
                    players:player_id (nickname, faction)
                `)
                .order('created_at', { ascending: false })
                .limit(50);
                
            if (chatError) throw chatError;
            
            this.worldState = {
                players: players || [],
                mobs: mobs || [],
                chatMessages: (chatMessages || []).reverse()
            };
            
            console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', this.worldState);
            return this.worldState;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞:', error);
            throw error;
        }
    }
    
    // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    async movePlayer(direction) {
        if (!this.currentSession) return false;
        
        try {
            let newX = this.currentSession.x;
            let newY = this.currentSession.y;
            
            switch (direction) {
                case 'up': newY = Math.max(0, newY - 1); break;
                case 'down': newY = Math.min(14, newY + 1); break;
                case 'left': newX = Math.max(0, newX - 1); break;
                case 'right': newX = Math.min(14, newX + 1); break;
            }
            
            const { data, error } = await this.supabase
                .from('players')
                .update({ x: newX, y: newY })
                .eq('id', this.currentSession.id)
                .select()
                .single();
                
            if (error) throw error;
            
            this.currentSession.x = newX;
            this.currentSession.y = newY;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –º–æ–±–∞–º–∏
            const mobsAtPosition = this.worldState.mobs.filter(
                mob => mob.x === newX && mob.y === newY && mob.is_alive
            );
            
            return {
                success: true,
                newPosition: { x: newX, y: newY },
                mobsEncountered: mobsAtPosition
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è:', error);
            return { success: false, error: error.message };
        }
    }
    
    // –ê—Ç–∞–∫–∞ –º–æ–±–∞
    async attackMob(mobId) {
        if (!this.currentSession) return false;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–±–∞
            const { data: mob, error: mobError } = await this.supabase
                .from('active_world_mobs')
                .select('*')
                .eq('id', mobId)
                .single();
                
            if (mobError || !mob) {
                throw new Error('–ú–æ–± –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            const distance = Math.abs(this.currentSession.x - mob.x) + Math.abs(this.currentSession.y - mob.y);
            if (distance > 1) {
                throw new Error('–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –º–æ–±–∞');
            }
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –±–æ–π
            const battleResult = await this.simulateBattle(this.currentSession, mob);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è –≤ –ë–î
            await this.saveBattleResult(battleResult, mob);
            
            return battleResult;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—Ç–∞–∫–∏ –º–æ–±–∞:', error);
            throw error;
        }
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è –±–æ—è
    async simulateBattle(player, mob) {
        const playerStats = {
            hp: 50 + (player.end_stat || player.end || 1) * 10, // —É—á–∏—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            attack: 10 + (player.str || 1) * 3,
            defense: (player.end_stat || player.end || 1) * 2,
            dodgeChance: (player.dex || 1) * 1.5 + (player.int || 1) * 2 + (player.lck || 1) * 1
        };
        
        let playerHp = playerStats.hp;
        let mobHp = mob.current_hp;
        let totalDamageDealt = 0;
        let totalDamageTaken = 0;
        
        const log = [];
        
        // –ü—Ä–æ—Å—Ç–æ–π –±–æ–π: –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±—å–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞
        while (playerHp > 0 && mobHp > 0) {
            // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
            const playerDamage = Math.max(1, playerStats.attack - mob.base_defense);
            mobHp -= playerDamage;
            totalDamageDealt += playerDamage;
            log.push(`–í—ã –Ω–∞–Ω–µ—Å–ª–∏ ${playerDamage} —É—Ä–æ–Ω–∞ –º–æ–±—É ${mob.name}`);
            
            if (mobHp <= 0) break;
            
            // –•–æ–¥ –º–æ–±–∞
            const mobDamage = Math.max(1, mob.base_attack - playerStats.defense);
            playerHp -= mobDamage;
            totalDamageTaken += mobDamage;
            log.push(`${mob.name} –Ω–∞–Ω–µ—Å –≤–∞–º ${mobDamage} —É—Ä–æ–Ω–∞`);
        }
        
        const playerWon = playerHp > 0;
        const rewards = playerWon ? {
            exp: 10 + Math.floor(Math.random() * 10),
            gold: mob.base_gold
        } : { exp: 0, gold: 0 };
        
        return {
            result: playerWon ? 'victory' : 'defeat',
            log: log,
            rewards: rewards,
            damageDealt: totalDamageDealt,
            damageTaken: totalDamageTaken,
            playerHp: Math.max(0, playerHp),
            mobHp: Math.max(0, mobHp)
        };
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–æ—è
    async saveBattleResult(battleResult, mob) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∞ (—É–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –ø–æ–±–µ–∂–¥–µ–Ω)
            if (battleResult.result === 'victory') {
                await this.supabase
                    .from('world_mobs')
                    .update({
                        current_hp: 0,
                        is_alive: false,
                        last_damage_at: new Date().toISOString()
                    })
                    .eq('id', mob.id);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            if (battleResult.result === 'victory') {
                const newExp = this.currentSession.experience + battleResult.rewards.exp;
                const newGold = this.currentSession.gold + battleResult.rewards.gold;
                let newLevel = this.currentSession.level;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                const requiredExp = newLevel * 100;
                if (newExp >= requiredExp) {
                    newLevel += 1;
                    // –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—ã –Ω–∞ 1
                    const updateData = {
                        level: newLevel,
                        experience: 0,
                        gold: newGold + 50, // –±–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
                        str: this.currentSession.str + 1,
                        end_stat: (this.currentSession.end_stat || this.currentSession.end) + 1,
                        dex: this.currentSession.dex + 1,
                        int: this.currentSession.int + 1,
                        cha: this.currentSession.cha + 1,
                        lck: this.currentSession.lck + 1
                    };
                    
                    await this.supabase
                        .from('players')
                        .update(updateData)
                        .eq('id', this.currentSession.id);
                        
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
                    Object.assign(this.currentSession, updateData);
                    
                    battleResult.levelUp = true;
                    battleResult.newLevel = newLevel;
                } else {
                    await this.supabase
                        .from('players')
                        .update({
                            experience: newExp,
                            gold: newGold
                        })
                        .eq('id', this.currentSession.id);
                        
                    this.currentSession.experience = newExp;
                    this.currentSession.gold = newGold;
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –±–æ–µ
            await this.supabase
                .from('battles')
                .insert([{
                    player_id: this.currentSession.id,
                    opponent_type: 'mob',
                    opponent_id: mob.id,
                    status: 'finished',
                    winner: battleResult.result === 'victory' ? 'player' : 'opponent',
                    player_damage_dealt: battleResult.damageDealt,
                    player_damage_taken: battleResult.damageTaken,
                    exp_gained: battleResult.rewards.exp,
                    gold_gained: battleResult.rewards.gold,
                    finished_at: new Date().toISOString()
                }]);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.supabase.rpc('update_player_stats', {
                p_player_id: this.currentSession.id,
                p_battle_won: battleResult.result === 'victory',
                p_damage_dealt: battleResult.damageDealt,
                p_damage_taken: battleResult.damageTaken,
                p_gold_earned: battleResult.rewards.gold
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–æ—è:', error);
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    async sendChatMessage(message) {
        if (!this.currentSession || !message.trim()) return false;
        
        try {
            const { data, error } = await this.supabase
                .from('chat_messages')
                .insert([{
                    player_id: this.currentSession.id,
                    message: message.trim(),
                    channel: 'global'
                }])
                .select(`
                    *,
                    players:player_id (nickname, faction)
                `)
                .single();
                
            if (error) throw error;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            await this.supabase.rpc('update_player_stats', {
                p_player_id: this.currentSession.id,
                p_messages_sent: 1
            });
            
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            throw error;
        }
    }
    
    // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    async trainStat(statName, cost) {
        if (!this.currentSession) return false;
        
        try {
            if (this.currentSession.gold < cost) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞');
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º end –≤ end_stat –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const dbStatName = statName === 'end' ? 'end_stat' : statName;
            
            const updateData = {
                gold: this.currentSession.gold - cost
            };
            updateData[dbStatName] = (this.currentSession[statName] || this.currentSession[dbStatName]) + 1;
            
            const { data, error } = await this.supabase
                .from('players')
                .update(updateData)
                .eq('id', this.currentSession.id)
                .select()
                .single();
                
            if (error) throw error;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
            this.currentSession.gold -= cost;
            this.currentSession[statName] = (this.currentSession[statName] || this.currentSession[dbStatName]) + 1;
            if (dbStatName !== statName) {
                this.currentSession[dbStatName] = this.currentSession[statName];
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.supabase.rpc('update_player_stats', {
                p_player_id: this.currentSession.id,
                p_gold_spent: cost
            });
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
            throw error;
        }
    }
    
    // –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
    async logout() {
        if (!this.currentSession) return;
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–ª–∞–π–Ω
            await this.supabase
                .from('players')
                .update({ is_online: false })
                .eq('id', this.currentSession.id);
                
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç realtime
            if (this.realtimeChannel) {
                this.supabase.removeChannel(this.realtimeChannel);
                this.realtimeChannel = null;
            }
            
            this.currentSession = null;
            console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ realtime —Å–æ–±—ã—Ç–∏–π
    handlePlayerUpdate(payload) {
        const { eventType, new: newRecord, old: oldRecord } = payload;
        
        if (eventType === 'UPDATE' && newRecord) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
            const index = this.worldState.players.findIndex(p => p.id === newRecord.id);
            if (index !== -1) {
                this.worldState.players[index] = newRecord;
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            this.notifyWorldUpdate('player_moved', newRecord);
        }
    }
    
    handleChatMessage(message) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        this.worldState.chatMessages.push(message);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (this.worldState.chatMessages.length > 100) {
            this.worldState.chatMessages.shift();
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.notifyWorldUpdate('chat_message', message);
    }
    
    handleMobUpdate(payload) {
        const { eventType, new: newRecord } = payload;
        
        if (eventType === 'UPDATE' && newRecord) {
            const index = this.worldState.mobs.findIndex(m => m.id === newRecord.id);
            if (index !== -1) {
                this.worldState.mobs[index] = newRecord;
            }
            
            this.notifyWorldUpdate('mob_updated', newRecord);
        }
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    notifyWorldUpdate(eventType, data) {
        const event = new CustomEvent('worldUpdate', {
            detail: { type: eventType, data: data }
        });
        window.dispatchEvent(event);
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    hashPassword(password) {
        // –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bcrypt)
        let hash = 0;
        for (let i = 0; i < password.length; i++) {
            const char = password.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash.toString();
    }
    
    getFactionStats(faction) {
        if (faction === 'workers') {
            return { str: 5, end_stat: 5, dex: 3, int: 1, cha: 1, lck: 3 };
        } else {
            return { str: 2, end_stat: 2, dex: 2, int: 5, cha: 5, lck: 2 };
        }
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    getCurrentPlayer() {
        return this.currentSession;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞
    getWorldState() {
        return this.worldState;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    isOnline() {
        return this.isConnected && this.currentSession !== null;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
if (!window.supabaseClient) {
    window.supabaseClient = new SupabaseGameClient();
}

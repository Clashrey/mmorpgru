// js/supabase-client.js - –¢–û–õ–¨–ö–û SUPABASE, –ù–ò–ö–ê–ö–ò–• –õ–û–ö–ê–õ–¨–ù–´–• –ú–ï–•–ê–ù–ò–ó–ú–û–í
class SupabaseGameClient {
    constructor() {
        this.supabaseUrl = 'https://gkqhsscmxzvbaabesoch.supabase.co';
        this.supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdrcWhzc2NteHp2YmFhYmVzb2NoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI2Nzc0MTQsImV4cCI6MjA2ODI1MzQxNH0.CcqxRWMosNa6UP1XaRpBcmBSrB44PGQpBrsSSuC45j0';
        this.supabase = null;
        this.currentPlayer = null;
        this.isConnected = false;
        this.worldState = {
            players: [],
            mobs: [],
            chatMessages: []
        };
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    async initialize() {
        try {
            if (typeof window.supabase === 'undefined') {
                console.error('‚ùå Supabase SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                return false;
            }
            
            this.supabase = window.supabase.createClient(this.supabaseUrl, this.supabaseKey, {
                auth: {
                    autoRefreshToken: false,
                    persistSession: false,
                    detectSessionInUrl: false
                }
            });
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const { data, error } = await this.supabase
                .from('players')
                .select('id')
                .limit(1);
            
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', error);
                throw error;
            }
            
            console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω!');
            this.isConnected = true;
            this.setupRealtimeSubscriptions();
            return true;
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Supabase:', error);
            this.isConnected = false;
            throw error;
        }
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ - –¢–û–õ–¨–ö–û SUPABASE
    async registerPlayer(characterData, password) {
        if (!this.isConnected) {
            throw new Error('Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        console.log('üîê –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞:', characterData);
        
        const { data: newPlayer, error } = await this.supabase
            .from('players')
            .insert({
                nickname: characterData.nickname,
                password: password,
                faction: characterData.faction,
                gender: characterData.gender
            })
            .select()
            .single();
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
        }
        
        console.log('‚úÖ –ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', newPlayer);
        this.currentPlayer = this.convertPlayerFormat(newPlayer);
        return this.currentPlayer;
    }
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ - –¢–û–õ–¨–ö–û SUPABASE
    async loginPlayer(nickname, password) {
        if (!this.isConnected) {
            throw new Error('Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', nickname);
        
        const { data: player, error } = await this.supabase
            .from('players')
            .select('*')
            .eq('nickname', nickname)
            .eq('password', password)
            .single();
            
        if (error || !player) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        }
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', player);
        this.currentPlayer = this.convertPlayerFormat(player);
        return this.currentPlayer;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ë–î
    convertPlayerFormat(dbPlayer) {
        return {
            id: dbPlayer.id,
            nickname: dbPlayer.nickname,
            faction: dbPlayer.faction,
            gender: dbPlayer.gender,
            level: dbPlayer.level || 1,
            experience: dbPlayer.experience || 0,
            gold: dbPlayer.gold || 100,
            health: dbPlayer.health || 70,
            stats: {
                str: dbPlayer.str || 5,
                end: dbPlayer.end_stat || 5,
                dex: dbPlayer.dex || 3,
                int: dbPlayer.int || 1,
                cha: dbPlayer.cha || 1,
                lck: dbPlayer.lck || 3
            },
            x: dbPlayer.x || 7,
            y: dbPlayer.y || 7
        };
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ - –¢–û–õ–¨–ö–û SUPABASE
    async loadWorldState() {
        if (!this.isConnected) {
            throw new Error('Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        const { data: mobs, error } = await this.supabase
            .from('world_mobs')
            .select('*');
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–∞: ${error.message}`);
        }
        
        this.worldState.mobs = mobs || [];
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', this.worldState);
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ realtime –ø–æ–¥–ø–∏—Å–æ–∫
    setupRealtimeSubscriptions() {
        if (!this.isConnected) return;
        
        this.supabase
            .channel('world_updates')
            .on('postgres_changes', {
                event: '*',
                schema: 'public',
                table: 'world_mobs'
            }, payload => {
                console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–±–æ–≤:', payload);
            })
            .subscribe();
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    getCurrentPlayer() {
        return this.currentPlayer;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞
    getWorldState() {
        return this.worldState;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    isOnline() {
        return this.isConnected;
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    setCurrentPlayer(player) {
        this.currentPlayer = player;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞
    async savePlayer(player) {
        if (!this.isConnected) {
            throw new Error('Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData = {
            level: player.level || 1,
            experience: player.experience || 0,
            gold: player.gold || 0,
            health: player.health || 70,
            x: player.x || 7,
            y: player.y || 7
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (player.stats) {
            updateData.str = player.stats.str || 1;
            updateData.end_stat = player.stats.end || 1;
            updateData.dex = player.stats.dex || 1;
            updateData.int = player.stats.int || 1;
            updateData.cha = player.stats.cha || 1;
            updateData.lck = player.stats.lck || 1;
        }
        
        console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ Supabase:', updateData);
        
        const { data, error } = await this.supabase
            .from('players')
            .update(updateData)
            .eq('id', player.id)
            .select()
            .single();
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:', error);
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
        }
        
        console.log('‚úÖ –ò–≥—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase:', data);
        return this.convertPlayerFormat(data);
    }
    
    // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    async movePlayer(direction) {
        if (!this.isConnected || !this.currentPlayer) {
            throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –∏–≥—Ä–æ–∫–∞');
        }
        
        let newX = this.currentPlayer.x;
        let newY = this.currentPlayer.y;
        
        switch (direction) {
            case 'up': newY = Math.max(0, newY - 1); break;
            case 'down': newY = Math.min(14, newY + 1); break;
            case 'left': newX = Math.max(0, newX - 1); break;
            case 'right': newX = Math.min(14, newX + 1); break;
        }
        
        const { error } = await this.supabase
            .from('players')
            .update({ x: newX, y: newY })
            .eq('id', this.currentPlayer.id);
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è: ${error.message}`);
        }
        
        this.currentPlayer.x = newX;
        this.currentPlayer.y = newY;
        
        return { success: true, mobsEncountered: [] };
    }
    
    // –ê—Ç–∞–∫–∞ –º–æ–±–∞
    async attackMob(mobId) {
        if (!this.isConnected || !this.currentPlayer) {
            throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –∏–≥—Ä–æ–∫–∞');
        }
        
        const mob = this.worldState.mobs.find(m => m.id === mobId);
        if (!mob) {
            throw new Error('–ú–æ–± –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const damage = Math.floor(Math.random() * 20) + 10;
        const newHp = Math.max(0, mob.current_hp - damage);
        
        const { error } = await this.supabase
            .from('world_mobs')
            .update({ 
                current_hp: newHp,
                is_alive: newHp > 0
            })
            .eq('id', mobId);
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∞—Ç–∞–∫–∏: ${error.message}`);
        }
        
        const log = [`–í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ ${mob.name} –Ω–∞ ${damage} —É—Ä–æ–Ω–∞!`];
        
        if (newHp <= 0) {
            log.push(`${mob.name} –ø–æ–≤–µ—Ä–∂–µ–Ω!`);
            await this.supabase
                .from('players')
                .update({ 
                    gold: this.currentPlayer.gold + mob.base_gold,
                    experience: this.currentPlayer.experience + 10
                })
                .eq('id', this.currentPlayer.id);
                
            this.currentPlayer.gold += mob.base_gold;
            this.currentPlayer.experience += 10;
        }
        
        return {
            result: newHp <= 0 ? 'victory' : 'continue',
            log: log,
            rewards: newHp <= 0 ? { exp: 10, gold: mob.base_gold } : null
        };
    }
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    async sendChatMessage(message) {
        if (!this.isConnected || !this.currentPlayer) {
            throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –∏–≥—Ä–æ–∫–∞');
        }
        
        const { error } = await this.supabase
            .from('chat_messages')
            .insert({
                player_id: this.currentPlayer.id,
                message: message.trim(),
                channel: 'global'
            });
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
        
        return true;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    async getChatMessages(limit = 20) {
        if (!this.isConnected) {
            throw new Error('Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        const { data, error } = await this.supabase
            .from('chat_messages')
            .select(`
                id,
                message,
                created_at,
                players!inner(
                    nickname,
                    faction
                )
            `)
            .order('created_at', { ascending: false })
            .limit(limit);
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞: ${error.message}`);
        }
        
        return data.reverse(); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–∏–∑—É
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
    async getPlayersRanking(limit = 10) {
        if (!this.isConnected) {
            throw new Error('Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        const { data, error } = await this.supabase
            .from('players')
            .select('nickname, faction, level, str, end_stat, dex, int, cha, lck')
            .order('level', { ascending: false })
            .limit(limit);
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: ${error.message}`);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å—Ç–∞—Ç–æ–≤
        return data.map(player => ({
            ...player,
            totalStats: (player.str || 0) + (player.end_stat || 0) + (player.dex || 0) + 
                       (player.int || 0) + (player.cha || 0) + (player.lck || 0)
        })).sort((a, b) => b.totalStats - a.totalStats);
    }
    
    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    async logout() {
        if (this.currentPlayer) {
            await this.supabase
                .from('players')
                .update({ is_online: false })
                .eq('id', this.currentPlayer.id);
        }
        
        this.currentPlayer = null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.supabaseClient = new SupabaseGameClient();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç...');
    
    try {
        await window.supabaseClient.initialize();
        console.log('üåê –†–∞–±–æ—Ç–∞–µ–º –≤ –û–ù–õ–ê–ô–ù —Ä–µ–∂–∏–º–µ');
        await window.supabaseClient.loadWorldState();
    } catch (error) {
        console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ' + error.message);
    }
});
